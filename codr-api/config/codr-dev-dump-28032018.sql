--
-- PostgreSQL database dump
--

-- Dumped from database version 9.6.6
-- Dumped by pg_dump version 9.6.6

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: postgraphile_watch; Type: SCHEMA; Schema: -; Owner: codrdb
--

CREATE SCHEMA postgraphile_watch;


ALTER SCHEMA postgraphile_watch OWNER TO codrdb;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET search_path = postgraphile_watch, pg_catalog;

--
-- Name: notify_watchers_ddl(); Type: FUNCTION; Schema: postgraphile_watch; Owner: codrdb
--

CREATE FUNCTION notify_watchers_ddl() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
begin
  perform pg_notify(
    'postgraphile_watch',
    json_build_object(
      'type',
      'ddl',
      'payload',
      (select json_agg(json_build_object('schema', schema_name, 'command', command_tag)) from pg_event_trigger_ddl_commands() as x)
    )::text
  );
end;
$$;


ALTER FUNCTION postgraphile_watch.notify_watchers_ddl() OWNER TO codrdb;

--
-- Name: notify_watchers_drop(); Type: FUNCTION; Schema: postgraphile_watch; Owner: codrdb
--

CREATE FUNCTION notify_watchers_drop() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
begin
  perform pg_notify(
    'postgraphile_watch',
    json_build_object(
      'type',
      'drop',
      'payload',
      (select json_agg(distinct x.schema_name) from pg_event_trigger_dropped_objects() as x)
    )::text
  );
end;
$$;


ALTER FUNCTION postgraphile_watch.notify_watchers_drop() OWNER TO codrdb;

SET search_path = public, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: comments; Type: TABLE; Schema: public; Owner: codrdb
--

CREATE TABLE comments (
    id integer NOT NULL,
    parent_id integer,
    file_id integer,
    line_range text,
    content text NOT NULL,
    author_id integer NOT NULL,
    visible boolean NOT NULL,
    "timestamp" bigint NOT NULL,
    deleted boolean DEFAULT false NOT NULL
);


ALTER TABLE comments OWNER TO codrdb;

--
-- Name: comments_id_seq; Type: SEQUENCE; Schema: public; Owner: codrdb
--

CREATE SEQUENCE comments_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE comments_id_seq OWNER TO codrdb;

--
-- Name: comments_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: codrdb
--

ALTER SEQUENCE comments_id_seq OWNED BY comments.id;


--
-- Name: courses; Type: TABLE; Schema: public; Owner: codrdb
--

CREATE TABLE courses (
    id integer NOT NULL,
    module_id integer NOT NULL,
    name text NOT NULL,
    description text NOT NULL
);


ALTER TABLE courses OWNER TO codrdb;

--
-- Name: courses_id_seq; Type: SEQUENCE; Schema: public; Owner: codrdb
--

CREATE SEQUENCE courses_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE courses_id_seq OWNER TO codrdb;

--
-- Name: courses_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: codrdb
--

ALTER SEQUENCE courses_id_seq OWNED BY courses.id;


--
-- Name: exercises; Type: TABLE; Schema: public; Owner: codrdb
--

CREATE TABLE exercises (
    id integer NOT NULL,
    course_id integer NOT NULL,
    rights_template_id integer NOT NULL,
    name text NOT NULL,
    description text NOT NULL
);


ALTER TABLE exercises OWNER TO codrdb;

--
-- Name: exercises_id_seq; Type: SEQUENCE; Schema: public; Owner: codrdb
--

CREATE SEQUENCE exercises_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE exercises_id_seq OWNER TO codrdb;

--
-- Name: exercises_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: codrdb
--

ALTER SEQUENCE exercises_id_seq OWNED BY exercises.id;


--
-- Name: files; Type: TABLE; Schema: public; Owner: codrdb
--

CREATE TABLE files (
    id integer NOT NULL,
    project_id integer NOT NULL,
    path text NOT NULL,
    content text[] NOT NULL
);


ALTER TABLE files OWNER TO codrdb;

--
-- Name: files_id_seq; Type: SEQUENCE; Schema: public; Owner: codrdb
--

CREATE SEQUENCE files_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE files_id_seq OWNER TO codrdb;

--
-- Name: files_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: codrdb
--

ALTER SEQUENCE files_id_seq OWNED BY files.id;


--
-- Name: groups; Type: TABLE; Schema: public; Owner: codrdb
--

CREATE TABLE groups (
    id integer NOT NULL,
    description text NOT NULL
);


ALTER TABLE groups OWNER TO codrdb;

--
-- Name: groups_id_seq; Type: SEQUENCE; Schema: public; Owner: codrdb
--

CREATE SEQUENCE groups_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE groups_id_seq OWNER TO codrdb;

--
-- Name: groups_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: codrdb
--

ALTER SEQUENCE groups_id_seq OWNED BY groups.id;


--
-- Name: module_users; Type: TABLE; Schema: public; Owner: codrdb
--

CREATE TABLE module_users (
    module_id integer NOT NULL,
    user_id integer NOT NULL,
    group_id integer NOT NULL
);


ALTER TABLE module_users OWNER TO codrdb;

--
-- Name: modules; Type: TABLE; Schema: public; Owner: codrdb
--

CREATE TABLE modules (
    id integer NOT NULL,
    name text NOT NULL,
    description text NOT NULL
);


ALTER TABLE modules OWNER TO codrdb;

--
-- Name: modules_id_seq; Type: SEQUENCE; Schema: public; Owner: codrdb
--

CREATE SEQUENCE modules_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE modules_id_seq OWNER TO codrdb;

--
-- Name: modules_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: codrdb
--

ALTER SEQUENCE modules_id_seq OWNED BY modules.id;


--
-- Name: projectgroup; Type: TABLE; Schema: public; Owner: codrdb
--

CREATE TABLE projectgroup (
    id integer NOT NULL
);


ALTER TABLE projectgroup OWNER TO codrdb;

--
-- Name: projectgroup_id_seq; Type: SEQUENCE; Schema: public; Owner: codrdb
--

CREATE SEQUENCE projectgroup_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE projectgroup_id_seq OWNER TO codrdb;

--
-- Name: projectgroup_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: codrdb
--

ALTER SEQUENCE projectgroup_id_seq OWNED BY projectgroup.id;


--
-- Name: projectgroup_users; Type: TABLE; Schema: public; Owner: codrdb
--

CREATE TABLE projectgroup_users (
    projectgroup_id integer NOT NULL,
    user_id integer NOT NULL
);


ALTER TABLE projectgroup_users OWNER TO codrdb;

--
-- Name: projects; Type: TABLE; Schema: public; Owner: codrdb
--

CREATE TABLE projects (
    id integer NOT NULL,
    exercise_id integer NOT NULL,
    author_id integer NOT NULL,
    projectgroup_id integer NOT NULL
);


ALTER TABLE projects OWNER TO codrdb;

--
-- Name: projects_id_seq; Type: SEQUENCE; Schema: public; Owner: codrdb
--

CREATE SEQUENCE projects_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE projects_id_seq OWNER TO codrdb;

--
-- Name: projects_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: codrdb
--

ALTER SEQUENCE projects_id_seq OWNED BY projects.id;


--
-- Name: templates; Type: TABLE; Schema: public; Owner: codrdb
--

CREATE TABLE templates (
    id integer NOT NULL,
    name text NOT NULL
);


ALTER TABLE templates OWNER TO codrdb;

--
-- Name: templates_content; Type: TABLE; Schema: public; Owner: codrdb
--

CREATE TABLE templates_content (
    template_id integer NOT NULL,
    group_id integer NOT NULL,
    project_right integer NOT NULL,
    comment_right integer NOT NULL
);


ALTER TABLE templates_content OWNER TO codrdb;

--
-- Name: templates_id_seq; Type: SEQUENCE; Schema: public; Owner: codrdb
--

CREATE SEQUENCE templates_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE templates_id_seq OWNER TO codrdb;

--
-- Name: templates_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: codrdb
--

ALTER SEQUENCE templates_id_seq OWNED BY templates.id;


--
-- Name: users; Type: TABLE; Schema: public; Owner: codrdb
--

CREATE TABLE users (
    id integer NOT NULL,
    session_id text NOT NULL,
    user_level integer NOT NULL,
    display_name text NOT NULL
);


ALTER TABLE users OWNER TO codrdb;

--
-- Name: users_id_seq; Type: SEQUENCE; Schema: public; Owner: codrdb
--

CREATE SEQUENCE users_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE users_id_seq OWNER TO codrdb;

--
-- Name: users_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: codrdb
--

ALTER SEQUENCE users_id_seq OWNED BY users.id;


--
-- Name: comments id; Type: DEFAULT; Schema: public; Owner: codrdb
--

ALTER TABLE ONLY comments ALTER COLUMN id SET DEFAULT nextval('comments_id_seq'::regclass);


--
-- Name: courses id; Type: DEFAULT; Schema: public; Owner: codrdb
--

ALTER TABLE ONLY courses ALTER COLUMN id SET DEFAULT nextval('courses_id_seq'::regclass);


--
-- Name: exercises id; Type: DEFAULT; Schema: public; Owner: codrdb
--

ALTER TABLE ONLY exercises ALTER COLUMN id SET DEFAULT nextval('exercises_id_seq'::regclass);


--
-- Name: files id; Type: DEFAULT; Schema: public; Owner: codrdb
--

ALTER TABLE ONLY files ALTER COLUMN id SET DEFAULT nextval('files_id_seq'::regclass);


--
-- Name: groups id; Type: DEFAULT; Schema: public; Owner: codrdb
--

ALTER TABLE ONLY groups ALTER COLUMN id SET DEFAULT nextval('groups_id_seq'::regclass);


--
-- Name: modules id; Type: DEFAULT; Schema: public; Owner: codrdb
--

ALTER TABLE ONLY modules ALTER COLUMN id SET DEFAULT nextval('modules_id_seq'::regclass);


--
-- Name: projectgroup id; Type: DEFAULT; Schema: public; Owner: codrdb
--

ALTER TABLE ONLY projectgroup ALTER COLUMN id SET DEFAULT nextval('projectgroup_id_seq'::regclass);


--
-- Name: projects id; Type: DEFAULT; Schema: public; Owner: codrdb
--

ALTER TABLE ONLY projects ALTER COLUMN id SET DEFAULT nextval('projects_id_seq'::regclass);


--
-- Name: templates id; Type: DEFAULT; Schema: public; Owner: codrdb
--

ALTER TABLE ONLY templates ALTER COLUMN id SET DEFAULT nextval('templates_id_seq'::regclass);


--
-- Name: users id; Type: DEFAULT; Schema: public; Owner: codrdb
--

ALTER TABLE ONLY users ALTER COLUMN id SET DEFAULT nextval('users_id_seq'::regclass);


--
-- Data for Name: comments; Type: TABLE DATA; Schema: public; Owner: codrdb
--

COPY comments (id, parent_id, file_id, line_range, content, author_id, visible, "timestamp", deleted) FROM stdin;
59	\N	39	1,12,122	TOM is een MEGA LUL	1	t	1522071950	f
64	57	39	\N	oi	1	t	1522072875	f
65	\N	39	1,3,2,5,7,6		1	t	1522141229	f
66	\N	39	14,13		1	t	1522141290	f
67	\N	39	2,3,4,5,6,7		1	t	1522141394	f
68	\N	39	1,2,3		1	t	1522143229	f
69	\N	39	1,2,3	saerasadsfssadfoidsf	1	t	1522144249	f
70	\N	45	1	Message	1	t	1522148228	f
57	\N	39	5,6,7	:)	1	t	1522071908	f
62	\N	39	69	test12	1	t	1522072468	f
63	57	39	70,71,LOL	test123	1	t	1522072509	f
56	\N	39	1,2,3,4	haha	1	t	1522071896	f
71	\N	39	1,2,3	Hello test	1	t	1522229641048	f
\.


--
-- Name: comments_id_seq; Type: SEQUENCE SET; Schema: public; Owner: codrdb
--

SELECT pg_catalog.setval('comments_id_seq', 71, true);


--
-- Data for Name: courses; Type: TABLE DATA; Schema: public; Owner: codrdb
--

COPY courses (id, module_id, name, description) FROM stdin;
1	1	adsfds	asdsaddsa
2	1	bobs kitchen	asdsad
31	1	test	test
32	1	test	test
33	1	test1	test1
34	1	test2	blabla
35	9	test	test
36	8	test	test
37	2	test	test
38	2	test1	test1
39	2	test2	test2
40	2	test3	test3
41	2	test4	sdfdaf
42	2	test5	test5
43	11	test	test
44	11	1	1
45	11	2	2
46	2	test6	sdflksjflksj
4	1	test	JJ-licious
17	1	test	test
19	1	test	test
20	1	test	test
21	1	test	test
22	1	test	test
29	1	test	test
\.


--
-- Name: courses_id_seq; Type: SEQUENCE SET; Schema: public; Owner: codrdb
--

SELECT pg_catalog.setval('courses_id_seq', 46, true);


--
-- Data for Name: exercises; Type: TABLE DATA; Schema: public; Owner: codrdb
--

COPY exercises (id, course_id, rights_template_id, name, description) FROM stdin;
1	1	1	detuilo	ghjlo;p
3	1	1	Tom	test
\.


--
-- Name: exercises_id_seq; Type: SEQUENCE SET; Schema: public; Owner: codrdb
--

SELECT pg_catalog.setval('exercises_id_seq', 3, true);


--
-- Data for Name: files; Type: TABLE DATA; Schema: public; Owner: codrdb
--

COPY files (id, project_id, path, content) FROM stdin;
8	5	TransferMoney.java	{"package api.methods;","","import api.ApiBean;","import api.IncorrectInputException;","import com.google.gson.JsonSyntaxException;","import com.thetransactioncompany.jsonrpc2.JSONRPC2Response;","import databeans.MessageWrapper;","import databeans.MethodType;","import databeans.Transaction;","import util.JSONParser;","","import java.util.HashMap;","import java.util.Map;","","import static api.ApiService.PREFIX;","import static api.ApiService.MAX_ACCOUNT_NUMBER_LENGTH;","import static api.ApiService.DESCRIPTION_LIMIT;","import static api.methods.SharedUtilityMethods.sendErrorReply;","import static api.methods.SharedUtilityMethods.valueHasCorrectLength;","import static java.net.HttpURLConnection.HTTP_OK;","",/**," * @author Saul"," */","public abstract class TransferMoney {","","    /**","     * Transfer money between accounts, the authToken needs to belong to a user that is authorized to make transactions","     * from the sourceAccount.","     * @param params Parameters of the request (authToken, sourceIBAN, targetIBAN, targetName, amount, description).","     * @param api DataBean containing everything in the ApiService","     */","    public static void transferMoney(final Map<String, Object> params, final ApiBean api) {","        String cookie = (String) params.get(\\"authToken\\");","        Transaction transaction = JSONParser.createJsonTransaction(-1, (String) params.get(\\"sourceIBAN\\"),","                (String) params.get(\\"targetIBAN\\"), (String) params.get(\\"targetName\\"),","                (String) params.get(\\"description\\"), (Double) params.get(\\"amount\\"), false, false);","        System.out.printf(\\"%s Sending internal transaction.\\\\n\\", PREFIX);","        handleTransactionExceptions(transaction, cookie, api);","    }","","    /**","     * Tries to verify the input of a transaction request and then forward the request, sends an error if an","     * exception occurs.","     * @param transaction The transaction to test/process","     * @param cookie Cookie of the user that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void handleTransactionExceptions(","            final Transaction transaction, final String cookie, final ApiBean api) {","        try {","            verifyTransactionInput(transaction);","            doTransactionRequest(transaction, cookie, api);","        } catch (IncorrectInputException e) {","            System.out.printf(\\"%s %s, sending rejection.\\\\n\\", PREFIX, e.getMessage());","            sendErrorReply(JSONParser.createMessageWrapper(true, 418,","                    \\"One of the parameters has an invalid value.\\"), api);","        } catch (JsonSyntaxException e) {","            System.out.printf(\\"%s The json received contained incorrect syntax, sending rejection.\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 500,","                    \\"Unknown error occurred.\\", \\"Syntax error when parsing json.\\"), api);","        } catch (NumberFormatException e) {","            System.out.printf(\\"%s The transaction amount was incorrectly specified, sending rejection.\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 418,","                    \\"One of the parameters has an invalid value.\\",","                    \\"The following variable was incorrectly specified: transactionAmount.\\"), api);","        }","    }","","    /**","     * Checks if the input for a transaction request is correctly formatted and contains correct values.","     * @param transaction The transaction request.","     * @throws IncorrectInputException Thrown when a value is not correctly specified.","     * @throws JsonSyntaxException Thrown when the json string is incorrect and cant be parsed.","     * @throws NumberFormatException Thrown when a string value could not be parsed to a Long.","     */","    private static void verifyTransactionInput(final Transaction transaction)","            throws IncorrectInputException, JsonSyntaxException, NumberFormatException {","        final String sourceAccountNumber = transaction.getSourceAccountNumber();","        final String destinationAccountNumber = transaction.getDestinationAccountNumber();","        final String destinationAccountHolderName = transaction.getDestinationAccountHolderName();","        final String transactionDescription = transaction.getDescription();","        final double transactionAmount = transaction.getTransactionAmount();","        if (sourceAccountNumber == null || sourceAccountNumber.length() > MAX_ACCOUNT_NUMBER_LENGTH) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: sourceAccountNumber.\\");","        } else if (destinationAccountNumber == null || destinationAccountNumber.length() > MAX_ACCOUNT_NUMBER_LENGTH) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified:\\"","                    + \\" destinationAccountNumber.\\");","        } else if (destinationAccountHolderName == null || !valueHasCorrectLength(destinationAccountHolderName)) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified:\\"","                    + \\" destinationAccountHolderName.\\");","        } else if (transactionDescription == null || transactionDescription.length() > DESCRIPTION_LIMIT) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified:\\"","                    + \\" transactionDescription.\\");","        } else if (transactionAmount < 0) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: transactionAmount.\\");","        } else if (transaction.isProcessed()) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: isProcessed.\\");","        } else if (transaction.isSuccessful()) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: isSuccessful.\\");","        }","    }","","    /**","     * Forwards transaction request to the Authentication service and forwards the reply or sends a rejection if the","     * request fails.","     * @param transaction Transaction request that should be processed.","     * @param cookie Cookie of the User that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void doTransactionRequest(final Transaction transaction, final String cookie, final ApiBean api) {","        MessageWrapper data = JSONParser.createMessageWrapper(false, 0, \\"Request\\");","        data.setCookie(cookie);","        data.setMethodType(MethodType.TRANSFER_MONEY);","        data.setData(transaction);","","        System.out.printf(\\"%s Forwarding transaction request.\\\\n\\", PREFIX);","        api.getAuthenticationClient().putFormAsyncWith1Param(\\"/services/authentication/transaction\\",","                \\"data\\", api.getJsonConverter().toJson(data),","                (httpStatusCode, httpContentType, transactionReplyJson) -> {","                    if (httpStatusCode == HTTP_OK) {","                        MessageWrapper messageWrapper = api.getJsonConverter().fromJson(","                                JSONParser.removeEscapeCharacters(transactionReplyJson), MessageWrapper.class);","                        if (!messageWrapper.isError()) {","                            sendTransactionCallback((Transaction) messageWrapper.getData(), api);","                        } else {","                            sendErrorReply(messageWrapper, api);","                        }","                    } else {","                        sendErrorReply(JSONParser.createMessageWrapper(true, 500,","                                \\"An unknown error occurred.\\",","                                \\"There was a problem with one of the HTTP requests\\"), api);","                    }","                });","    }","","    /**","     * Forwards the result of a transaction request to the service that sent the request.","     * @param reply The processed transaction","     * @param api DataBean containing everything in the ApiService","     */","    private static void sendTransactionCallback(final Transaction reply, final ApiBean api) {","        if (reply.isSuccessful() && reply.isProcessed()) {","            long transactionId = reply.getTransactionID();","            System.out.printf(\\"%s Internal transaction %d successful.\\\\n\\\\n\\\\n\\\\n\\", PREFIX, transactionId);","            Map<String, Object> result = new HashMap<>();","            JSONRPC2Response response = new JSONRPC2Response(result, api.getId());","            api.getCallbackBuilder().build().reply(response.toJSONString());","        } else {","            System.out.printf(\\"%s Internal transaction was not successful\\\\n\\\\n\\\\n\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 500, \\"Unknown error occurred.\\"), api);","        }","    }","}",""}
9	5	UnblockCard.java	{"package api.methods;","","import api.ApiBean;","import api.IncorrectInputException;","import com.google.gson.JsonSyntaxException;","import com.thetransactioncompany.jsonrpc2.JSONRPC2Response;","import databeans.MessageWrapper;","import databeans.MethodType;","import databeans.PinCard;","import util.JSONParser;","","import java.util.HashMap;","import java.util.Map;","","import static api.ApiService.PREFIX;","import static api.ApiService.MAX_ACCOUNT_NUMBER_LENGTH;","import static api.methods.SharedUtilityMethods.sendErrorReply;","import static java.net.HttpURLConnection.HTTP_OK;","",/**," * @author Saul"," */","public abstract class UnblockCard {","","    /**","     * Unblocks a blocked pin card, requires logging in.","     * @param params Parameters of the request(authToken, iBAN, pinCard).","     * @param api DataBean containing everything in the ApiService","     */","    public static void unblockCard(final Map<String, Object> params, final ApiBean api) {","        String accountNumber = (String) params.get(\\"iBAN\\");","        String pinCard = (String) params.get(\\"pinCard\\");","        String cookie = (String) params.get(\\"authToken\\");","        PinCard request = new PinCard(accountNumber, Long.parseLong(pinCard));","        System.out.printf(\\"%s Sending pinCard unblock request.\\\\n\\", PREFIX);","        handlePinCardUnblockExceptions(request, cookie, api);","    }","","    /**","     * Tries to verify the input of the pinCard unblock and then forward the request, send a rejection if an","     * exception is thrown.","     * @param pinCard {@link PinCard} that should be unblocked.","     * @param cookie Cookie of the User that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void handlePinCardUnblockExceptions(final PinCard pinCard, final String cookie, final ApiBean api) {","        try {","            verifyPinCardInput(pinCard);","            doPinCardUnblockRequest(pinCard, cookie, api);","        } catch (IncorrectInputException e) {","            System.out.printf(\\"%s %s\\", PREFIX, e.getMessage());","            sendErrorReply(JSONParser.createMessageWrapper(true, 418,","                    \\"One of the parameters has an invalid value.\\", e.getMessage()), api);","        } catch (JsonSyntaxException e) {","            System.out.printf(\\"%s The json received contained incorrect syntax, sending rejection.\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 500, \\"Unknown error occurred.\\"), api);","        }","    }","","    /**","     * Checks if the input for an account link request is correctly formatted and contains correct values.","     * @param pinCard {@link PinCard} that should be unblocked.","     * @throws IncorrectInputException Thrown when a value is not correctly specified.","     * @throws JsonSyntaxException Thrown when the json string is incorrect and cant be parsed.","     */","    private static void verifyPinCardInput(final PinCard pinCard)","            throws IncorrectInputException, JsonSyntaxException {","        final String accountNumber = pinCard.getAccountNumber();","        if (accountNumber == null || accountNumber.length() > MAX_ACCOUNT_NUMBER_LENGTH) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: accountNumber.\\");","        }","    }","","    /**","     * Forwards a String representing a pinCard to the Authentication Service, and processes the reply if it is","     * successful or sends a rejection to the requesting source if it fails.","     * @param pinCard {@link PinCard} that should be unblocked.","     * @param cookie Cookie of the User that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void doPinCardUnblockRequest(final PinCard pinCard, final String cookie, final ApiBean api) {","        MessageWrapper data = JSONParser.createMessageWrapper(false, 0, \\"Request\\");","        data.setCookie(cookie);","        data.setMethodType(MethodType.UNBLOCK_CARD);","        data.setData(pinCard);","","        api.getAuthenticationClient().putFormAsyncWith1Param(\\"/services/authentication/unblockCard\\",","                \\"data\\", api.getJsonConverter().toJson(data), ((httpStatusCode, httpContentType, body) -> {","                    if (httpStatusCode == HTTP_OK) {","                        MessageWrapper messageWrapper = api.getJsonConverter().fromJson(","                                JSONParser.removeEscapeCharacters(body), MessageWrapper.class);","                        if (!messageWrapper.isError()) {","                            sendPinCardUnblockRequestCallback((PinCard) messageWrapper.getData(), api);","                        } else {","                            sendErrorReply(messageWrapper, api);","                        }","                    } else {","                        sendErrorReply(JSONParser.createMessageWrapper(true, 500,","                                \\"An unknown error occurred.\\",","                                \\"There was a problem with one of the HTTP requests\\"), api);","                    }","                }));","    }","","    /**","     * Forwards the result of a pinCard unblock request to the service that sent the request.","     * @param pinCard The result of a pinCard unblock request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void sendPinCardUnblockRequestCallback(final PinCard pinCard, final ApiBean api) {","        System.out.printf(\\"%s PinCard unblocked successfully for AccountNumber: %s, CardNumber: %s\\\\n\\\\n\\\\n\\\\n\\",","                PREFIX, pinCard.getAccountNumber(), pinCard.getCardNumber());","        Map<String, Object> result = new HashMap<>();","        JSONRPC2Response response = new JSONRPC2Response(result, api.getId());","        api.getCallbackBuilder().build().reply(response.toJSONString());","    }","}",""}
10	5	UnblockCard.java	{"package api.methods;","","import api.ApiBean;","import api.IncorrectInputException;","import com.google.gson.JsonSyntaxException;","import com.thetransactioncompany.jsonrpc2.JSONRPC2Response;","import databeans.MessageWrapper;","import databeans.MethodType;","import databeans.PinCard;","import util.JSONParser;","","import java.util.HashMap;","import java.util.Map;","","import static api.ApiService.PREFIX;","import static api.ApiService.MAX_ACCOUNT_NUMBER_LENGTH;","import static api.methods.SharedUtilityMethods.sendErrorReply;","import static java.net.HttpURLConnection.HTTP_OK;","",/**," * @author Saul"," */","public abstract class UnblockCard {","","    /**","     * Unblocks a blocked pin card, requires logging in.","     * @param params Parameters of the request(authToken, iBAN, pinCard).","     * @param api DataBean containing everything in the ApiService","     */","    public static void unblockCard(final Map<String, Object> params, final ApiBean api) {","        String accountNumber = (String) params.get(\\"iBAN\\");","        String pinCard = (String) params.get(\\"pinCard\\");","        String cookie = (String) params.get(\\"authToken\\");","        PinCard request = new PinCard(accountNumber, Long.parseLong(pinCard));","        System.out.printf(\\"%s Sending pinCard unblock request.\\\\n\\", PREFIX);","        handlePinCardUnblockExceptions(request, cookie, api);","    }","","    /**","     * Tries to verify the input of the pinCard unblock and then forward the request, send a rejection if an","     * exception is thrown.","     * @param pinCard {@link PinCard} that should be unblocked.","     * @param cookie Cookie of the User that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void handlePinCardUnblockExceptions(final PinCard pinCard, final String cookie, final ApiBean api) {","        try {","            verifyPinCardInput(pinCard);","            doPinCardUnblockRequest(pinCard, cookie, api);","        } catch (IncorrectInputException e) {","            System.out.printf(\\"%s %s\\", PREFIX, e.getMessage());","            sendErrorReply(JSONParser.createMessageWrapper(true, 418,","                    \\"One of the parameters has an invalid value.\\", e.getMessage()), api);","        } catch (JsonSyntaxException e) {","            System.out.printf(\\"%s The json received contained incorrect syntax, sending rejection.\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 500, \\"Unknown error occurred.\\"), api);","        }","    }","","    /**","     * Checks if the input for an account link request is correctly formatted and contains correct values.","     * @param pinCard {@link PinCard} that should be unblocked.","     * @throws IncorrectInputException Thrown when a value is not correctly specified.","     * @throws JsonSyntaxException Thrown when the json string is incorrect and cant be parsed.","     */","    private static void verifyPinCardInput(final PinCard pinCard)","            throws IncorrectInputException, JsonSyntaxException {","        final String accountNumber = pinCard.getAccountNumber();","        if (accountNumber == null || accountNumber.length() > MAX_ACCOUNT_NUMBER_LENGTH) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: accountNumber.\\");","        }","    }","","    /**","     * Forwards a String representing a pinCard to the Authentication Service, and processes the reply if it is","     * successful or sends a rejection to the requesting source if it fails.","     * @param pinCard {@link PinCard} that should be unblocked.","     * @param cookie Cookie of the User that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void doPinCardUnblockRequest(final PinCard pinCard, final String cookie, final ApiBean api) {","        MessageWrapper data = JSONParser.createMessageWrapper(false, 0, \\"Request\\");","        data.setCookie(cookie);","        data.setMethodType(MethodType.UNBLOCK_CARD);","        data.setData(pinCard);","","        api.getAuthenticationClient().putFormAsyncWith1Param(\\"/services/authentication/unblockCard\\",","                \\"data\\", api.getJsonConverter().toJson(data), ((httpStatusCode, httpContentType, body) -> {","                    if (httpStatusCode == HTTP_OK) {","                        MessageWrapper messageWrapper = api.getJsonConverter().fromJson(","                                JSONParser.removeEscapeCharacters(body), MessageWrapper.class);","                        if (!messageWrapper.isError()) {","                            sendPinCardUnblockRequestCallback((PinCard) messageWrapper.getData(), api);","                        } else {","                            sendErrorReply(messageWrapper, api);","                        }","                    } else {","                        sendErrorReply(JSONParser.createMessageWrapper(true, 500,","                                \\"An unknown error occurred.\\",","                                \\"There was a problem with one of the HTTP requests\\"), api);","                    }","                }));","    }","","    /**","     * Forwards the result of a pinCard unblock request to the service that sent the request.","     * @param pinCard The result of a pinCard unblock request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void sendPinCardUnblockRequestCallback(final PinCard pinCard, final ApiBean api) {","        System.out.printf(\\"%s PinCard unblocked successfully for AccountNumber: %s, CardNumber: %s\\\\n\\\\n\\\\n\\\\n\\",","                PREFIX, pinCard.getAccountNumber(), pinCard.getCardNumber());","        Map<String, Object> result = new HashMap<>();","        JSONRPC2Response response = new JSONRPC2Response(result, api.getId());","        api.getCallbackBuilder().build().reply(response.toJSONString());","    }","}",""}
11	5	TransferMoney.java	{"package api.methods;","","import api.ApiBean;","import api.IncorrectInputException;","import com.google.gson.JsonSyntaxException;","import com.thetransactioncompany.jsonrpc2.JSONRPC2Response;","import databeans.MessageWrapper;","import databeans.MethodType;","import databeans.Transaction;","import util.JSONParser;","","import java.util.HashMap;","import java.util.Map;","","import static api.ApiService.PREFIX;","import static api.ApiService.MAX_ACCOUNT_NUMBER_LENGTH;","import static api.ApiService.DESCRIPTION_LIMIT;","import static api.methods.SharedUtilityMethods.sendErrorReply;","import static api.methods.SharedUtilityMethods.valueHasCorrectLength;","import static java.net.HttpURLConnection.HTTP_OK;","",/**," * @author Saul"," */","public abstract class TransferMoney {","","    /**","     * Transfer money between accounts, the authToken needs to belong to a user that is authorized to make transactions","     * from the sourceAccount.","     * @param params Parameters of the request (authToken, sourceIBAN, targetIBAN, targetName, amount, description).","     * @param api DataBean containing everything in the ApiService","     */","    public static void transferMoney(final Map<String, Object> params, final ApiBean api) {","        String cookie = (String) params.get(\\"authToken\\");","        Transaction transaction = JSONParser.createJsonTransaction(-1, (String) params.get(\\"sourceIBAN\\"),","                (String) params.get(\\"targetIBAN\\"), (String) params.get(\\"targetName\\"),","                (String) params.get(\\"description\\"), (Double) params.get(\\"amount\\"), false, false);","        System.out.printf(\\"%s Sending internal transaction.\\\\n\\", PREFIX);","        handleTransactionExceptions(transaction, cookie, api);","    }","","    /**","     * Tries to verify the input of a transaction request and then forward the request, sends an error if an","     * exception occurs.","     * @param transaction The transaction to test/process","     * @param cookie Cookie of the user that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void handleTransactionExceptions(","            final Transaction transaction, final String cookie, final ApiBean api) {","        try {","            verifyTransactionInput(transaction);","            doTransactionRequest(transaction, cookie, api);","        } catch (IncorrectInputException e) {","            System.out.printf(\\"%s %s, sending rejection.\\\\n\\", PREFIX, e.getMessage());","            sendErrorReply(JSONParser.createMessageWrapper(true, 418,","                    \\"One of the parameters has an invalid value.\\"), api);","        } catch (JsonSyntaxException e) {","            System.out.printf(\\"%s The json received contained incorrect syntax, sending rejection.\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 500,","                    \\"Unknown error occurred.\\", \\"Syntax error when parsing json.\\"), api);","        } catch (NumberFormatException e) {","            System.out.printf(\\"%s The transaction amount was incorrectly specified, sending rejection.\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 418,","                    \\"One of the parameters has an invalid value.\\",","                    \\"The following variable was incorrectly specified: transactionAmount.\\"), api);","        }","    }","","    /**","     * Checks if the input for a transaction request is correctly formatted and contains correct values.","     * @param transaction The transaction request.","     * @throws IncorrectInputException Thrown when a value is not correctly specified.","     * @throws JsonSyntaxException Thrown when the json string is incorrect and cant be parsed.","     * @throws NumberFormatException Thrown when a string value could not be parsed to a Long.","     */","    private static void verifyTransactionInput(final Transaction transaction)","            throws IncorrectInputException, JsonSyntaxException, NumberFormatException {","        final String sourceAccountNumber = transaction.getSourceAccountNumber();","        final String destinationAccountNumber = transaction.getDestinationAccountNumber();","        final String destinationAccountHolderName = transaction.getDestinationAccountHolderName();","        final String transactionDescription = transaction.getDescription();","        final double transactionAmount = transaction.getTransactionAmount();","        if (sourceAccountNumber == null || sourceAccountNumber.length() > MAX_ACCOUNT_NUMBER_LENGTH) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: sourceAccountNumber.\\");","        } else if (destinationAccountNumber == null || destinationAccountNumber.length() > MAX_ACCOUNT_NUMBER_LENGTH) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified:\\"","                    + \\" destinationAccountNumber.\\");","        } else if (destinationAccountHolderName == null || !valueHasCorrectLength(destinationAccountHolderName)) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified:\\"","                    + \\" destinationAccountHolderName.\\");","        } else if (transactionDescription == null || transactionDescription.length() > DESCRIPTION_LIMIT) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified:\\"","                    + \\" transactionDescription.\\");","        } else if (transactionAmount < 0) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: transactionAmount.\\");","        } else if (transaction.isProcessed()) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: isProcessed.\\");","        } else if (transaction.isSuccessful()) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: isSuccessful.\\");","        }","    }","","    /**","     * Forwards transaction request to the Authentication service and forwards the reply or sends a rejection if the","     * request fails.","     * @param transaction Transaction request that should be processed.","     * @param cookie Cookie of the User that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void doTransactionRequest(final Transaction transaction, final String cookie, final ApiBean api) {","        MessageWrapper data = JSONParser.createMessageWrapper(false, 0, \\"Request\\");","        data.setCookie(cookie);","        data.setMethodType(MethodType.TRANSFER_MONEY);","        data.setData(transaction);","","        System.out.printf(\\"%s Forwarding transaction request.\\\\n\\", PREFIX);","        api.getAuthenticationClient().putFormAsyncWith1Param(\\"/services/authentication/transaction\\",","                \\"data\\", api.getJsonConverter().toJson(data),","                (httpStatusCode, httpContentType, transactionReplyJson) -> {","                    if (httpStatusCode == HTTP_OK) {","                        MessageWrapper messageWrapper = api.getJsonConverter().fromJson(","                                JSONParser.removeEscapeCharacters(transactionReplyJson), MessageWrapper.class);","                        if (!messageWrapper.isError()) {","                            sendTransactionCallback((Transaction) messageWrapper.getData(), api);","                        } else {","                            sendErrorReply(messageWrapper, api);","                        }","                    } else {","                        sendErrorReply(JSONParser.createMessageWrapper(true, 500,","                                \\"An unknown error occurred.\\",","                                \\"There was a problem with one of the HTTP requests\\"), api);","                    }","                });","    }","","    /**","     * Forwards the result of a transaction request to the service that sent the request.","     * @param reply The processed transaction","     * @param api DataBean containing everything in the ApiService","     */","    private static void sendTransactionCallback(final Transaction reply, final ApiBean api) {","        if (reply.isSuccessful() && reply.isProcessed()) {","            long transactionId = reply.getTransactionID();","            System.out.printf(\\"%s Internal transaction %d successful.\\\\n\\\\n\\\\n\\\\n\\", PREFIX, transactionId);","            Map<String, Object> result = new HashMap<>();","            JSONRPC2Response response = new JSONRPC2Response(result, api.getId());","            api.getCallbackBuilder().build().reply(response.toJSONString());","        } else {","            System.out.printf(\\"%s Internal transaction was not successful\\\\n\\\\n\\\\n\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 500, \\"Unknown error occurred.\\"), api);","        }","    }","}",""}
12	5	TransferMoney.java	{"package api.methods;","","import api.ApiBean;","import api.IncorrectInputException;","import com.google.gson.JsonSyntaxException;","import com.thetransactioncompany.jsonrpc2.JSONRPC2Response;","import databeans.MessageWrapper;","import databeans.MethodType;","import databeans.Transaction;","import util.JSONParser;","","import java.util.HashMap;","import java.util.Map;","","import static api.ApiService.PREFIX;","import static api.ApiService.MAX_ACCOUNT_NUMBER_LENGTH;","import static api.ApiService.DESCRIPTION_LIMIT;","import static api.methods.SharedUtilityMethods.sendErrorReply;","import static api.methods.SharedUtilityMethods.valueHasCorrectLength;","import static java.net.HttpURLConnection.HTTP_OK;","",/**," * @author Saul"," */","public abstract class TransferMoney {","","    /**","     * Transfer money between accounts, the authToken needs to belong to a user that is authorized to make transactions","     * from the sourceAccount.","     * @param params Parameters of the request (authToken, sourceIBAN, targetIBAN, targetName, amount, description).","     * @param api DataBean containing everything in the ApiService","     */","    public static void transferMoney(final Map<String, Object> params, final ApiBean api) {","        String cookie = (String) params.get(\\"authToken\\");","        Transaction transaction = JSONParser.createJsonTransaction(-1, (String) params.get(\\"sourceIBAN\\"),","                (String) params.get(\\"targetIBAN\\"), (String) params.get(\\"targetName\\"),","                (String) params.get(\\"description\\"), (Double) params.get(\\"amount\\"), false, false);","        System.out.printf(\\"%s Sending internal transaction.\\\\n\\", PREFIX);","        handleTransactionExceptions(transaction, cookie, api);","    }","","    /**","     * Tries to verify the input of a transaction request and then forward the request, sends an error if an","     * exception occurs.","     * @param transaction The transaction to test/process","     * @param cookie Cookie of the user that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void handleTransactionExceptions(","            final Transaction transaction, final String cookie, final ApiBean api) {","        try {","            verifyTransactionInput(transaction);","            doTransactionRequest(transaction, cookie, api);","        } catch (IncorrectInputException e) {","            System.out.printf(\\"%s %s, sending rejection.\\\\n\\", PREFIX, e.getMessage());","            sendErrorReply(JSONParser.createMessageWrapper(true, 418,","                    \\"One of the parameters has an invalid value.\\"), api);","        } catch (JsonSyntaxException e) {","            System.out.printf(\\"%s The json received contained incorrect syntax, sending rejection.\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 500,","                    \\"Unknown error occurred.\\", \\"Syntax error when parsing json.\\"), api);","        } catch (NumberFormatException e) {","            System.out.printf(\\"%s The transaction amount was incorrectly specified, sending rejection.\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 418,","                    \\"One of the parameters has an invalid value.\\",","                    \\"The following variable was incorrectly specified: transactionAmount.\\"), api);","        }","    }","","    /**","     * Checks if the input for a transaction request is correctly formatted and contains correct values.","     * @param transaction The transaction request.","     * @throws IncorrectInputException Thrown when a value is not correctly specified.","     * @throws JsonSyntaxException Thrown when the json string is incorrect and cant be parsed.","     * @throws NumberFormatException Thrown when a string value could not be parsed to a Long.","     */","    private static void verifyTransactionInput(final Transaction transaction)","            throws IncorrectInputException, JsonSyntaxException, NumberFormatException {","        final String sourceAccountNumber = transaction.getSourceAccountNumber();","        final String destinationAccountNumber = transaction.getDestinationAccountNumber();","        final String destinationAccountHolderName = transaction.getDestinationAccountHolderName();","        final String transactionDescription = transaction.getDescription();","        final double transactionAmount = transaction.getTransactionAmount();","        if (sourceAccountNumber == null || sourceAccountNumber.length() > MAX_ACCOUNT_NUMBER_LENGTH) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: sourceAccountNumber.\\");","        } else if (destinationAccountNumber == null || destinationAccountNumber.length() > MAX_ACCOUNT_NUMBER_LENGTH) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified:\\"","                    + \\" destinationAccountNumber.\\");","        } else if (destinationAccountHolderName == null || !valueHasCorrectLength(destinationAccountHolderName)) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified:\\"","                    + \\" destinationAccountHolderName.\\");","        } else if (transactionDescription == null || transactionDescription.length() > DESCRIPTION_LIMIT) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified:\\"","                    + \\" transactionDescription.\\");","        } else if (transactionAmount < 0) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: transactionAmount.\\");","        } else if (transaction.isProcessed()) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: isProcessed.\\");","        } else if (transaction.isSuccessful()) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: isSuccessful.\\");","        }","    }","","    /**","     * Forwards transaction request to the Authentication service and forwards the reply or sends a rejection if the","     * request fails.","     * @param transaction Transaction request that should be processed.","     * @param cookie Cookie of the User that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void doTransactionRequest(final Transaction transaction, final String cookie, final ApiBean api) {","        MessageWrapper data = JSONParser.createMessageWrapper(false, 0, \\"Request\\");","        data.setCookie(cookie);","        data.setMethodType(MethodType.TRANSFER_MONEY);","        data.setData(transaction);","","        System.out.printf(\\"%s Forwarding transaction request.\\\\n\\", PREFIX);","        api.getAuthenticationClient().putFormAsyncWith1Param(\\"/services/authentication/transaction\\",","                \\"data\\", api.getJsonConverter().toJson(data),","                (httpStatusCode, httpContentType, transactionReplyJson) -> {","                    if (httpStatusCode == HTTP_OK) {","                        MessageWrapper messageWrapper = api.getJsonConverter().fromJson(","                                JSONParser.removeEscapeCharacters(transactionReplyJson), MessageWrapper.class);","                        if (!messageWrapper.isError()) {","                            sendTransactionCallback((Transaction) messageWrapper.getData(), api);","                        } else {","                            sendErrorReply(messageWrapper, api);","                        }","                    } else {","                        sendErrorReply(JSONParser.createMessageWrapper(true, 500,","                                \\"An unknown error occurred.\\",","                                \\"There was a problem with one of the HTTP requests\\"), api);","                    }","                });","    }","","    /**","     * Forwards the result of a transaction request to the service that sent the request.","     * @param reply The processed transaction","     * @param api DataBean containing everything in the ApiService","     */","    private static void sendTransactionCallback(final Transaction reply, final ApiBean api) {","        if (reply.isSuccessful() && reply.isProcessed()) {","            long transactionId = reply.getTransactionID();","            System.out.printf(\\"%s Internal transaction %d successful.\\\\n\\\\n\\\\n\\\\n\\", PREFIX, transactionId);","            Map<String, Object> result = new HashMap<>();","            JSONRPC2Response response = new JSONRPC2Response(result, api.getId());","            api.getCallbackBuilder().build().reply(response.toJSONString());","        } else {","            System.out.printf(\\"%s Internal transaction was not successful\\\\n\\\\n\\\\n\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 500, \\"Unknown error occurred.\\"), api);","        }","    }","}",""}
13	5	UnblockCard.java	{"package api.methods;","","import api.ApiBean;","import api.IncorrectInputException;","import com.google.gson.JsonSyntaxException;","import com.thetransactioncompany.jsonrpc2.JSONRPC2Response;","import databeans.MessageWrapper;","import databeans.MethodType;","import databeans.PinCard;","import util.JSONParser;","","import java.util.HashMap;","import java.util.Map;","","import static api.ApiService.PREFIX;","import static api.ApiService.MAX_ACCOUNT_NUMBER_LENGTH;","import static api.methods.SharedUtilityMethods.sendErrorReply;","import static java.net.HttpURLConnection.HTTP_OK;","",/**," * @author Saul"," */","public abstract class UnblockCard {","","    /**","     * Unblocks a blocked pin card, requires logging in.","     * @param params Parameters of the request(authToken, iBAN, pinCard).","     * @param api DataBean containing everything in the ApiService","     */","    public static void unblockCard(final Map<String, Object> params, final ApiBean api) {","        String accountNumber = (String) params.get(\\"iBAN\\");","        String pinCard = (String) params.get(\\"pinCard\\");","        String cookie = (String) params.get(\\"authToken\\");","        PinCard request = new PinCard(accountNumber, Long.parseLong(pinCard));","        System.out.printf(\\"%s Sending pinCard unblock request.\\\\n\\", PREFIX);","        handlePinCardUnblockExceptions(request, cookie, api);","    }","","    /**","     * Tries to verify the input of the pinCard unblock and then forward the request, send a rejection if an","     * exception is thrown.","     * @param pinCard {@link PinCard} that should be unblocked.","     * @param cookie Cookie of the User that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void handlePinCardUnblockExceptions(final PinCard pinCard, final String cookie, final ApiBean api) {","        try {","            verifyPinCardInput(pinCard);","            doPinCardUnblockRequest(pinCard, cookie, api);","        } catch (IncorrectInputException e) {","            System.out.printf(\\"%s %s\\", PREFIX, e.getMessage());","            sendErrorReply(JSONParser.createMessageWrapper(true, 418,","                    \\"One of the parameters has an invalid value.\\", e.getMessage()), api);","        } catch (JsonSyntaxException e) {","            System.out.printf(\\"%s The json received contained incorrect syntax, sending rejection.\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 500, \\"Unknown error occurred.\\"), api);","        }","    }","","    /**","     * Checks if the input for an account link request is correctly formatted and contains correct values.","     * @param pinCard {@link PinCard} that should be unblocked.","     * @throws IncorrectInputException Thrown when a value is not correctly specified.","     * @throws JsonSyntaxException Thrown when the json string is incorrect and cant be parsed.","     */","    private static void verifyPinCardInput(final PinCard pinCard)","            throws IncorrectInputException, JsonSyntaxException {","        final String accountNumber = pinCard.getAccountNumber();","        if (accountNumber == null || accountNumber.length() > MAX_ACCOUNT_NUMBER_LENGTH) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: accountNumber.\\");","        }","    }","","    /**","     * Forwards a String representing a pinCard to the Authentication Service, and processes the reply if it is","     * successful or sends a rejection to the requesting source if it fails.","     * @param pinCard {@link PinCard} that should be unblocked.","     * @param cookie Cookie of the User that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void doPinCardUnblockRequest(final PinCard pinCard, final String cookie, final ApiBean api) {","        MessageWrapper data = JSONParser.createMessageWrapper(false, 0, \\"Request\\");","        data.setCookie(cookie);","        data.setMethodType(MethodType.UNBLOCK_CARD);","        data.setData(pinCard);","","        api.getAuthenticationClient().putFormAsyncWith1Param(\\"/services/authentication/unblockCard\\",","                \\"data\\", api.getJsonConverter().toJson(data), ((httpStatusCode, httpContentType, body) -> {","                    if (httpStatusCode == HTTP_OK) {","                        MessageWrapper messageWrapper = api.getJsonConverter().fromJson(","                                JSONParser.removeEscapeCharacters(body), MessageWrapper.class);","                        if (!messageWrapper.isError()) {","                            sendPinCardUnblockRequestCallback((PinCard) messageWrapper.getData(), api);","                        } else {","                            sendErrorReply(messageWrapper, api);","                        }","                    } else {","                        sendErrorReply(JSONParser.createMessageWrapper(true, 500,","                                \\"An unknown error occurred.\\",","                                \\"There was a problem with one of the HTTP requests\\"), api);","                    }","                }));","    }","","    /**","     * Forwards the result of a pinCard unblock request to the service that sent the request.","     * @param pinCard The result of a pinCard unblock request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void sendPinCardUnblockRequestCallback(final PinCard pinCard, final ApiBean api) {","        System.out.printf(\\"%s PinCard unblocked successfully for AccountNumber: %s, CardNumber: %s\\\\n\\\\n\\\\n\\\\n\\",","                PREFIX, pinCard.getAccountNumber(), pinCard.getCardNumber());","        Map<String, Object> result = new HashMap<>();","        JSONRPC2Response response = new JSONRPC2Response(result, api.getId());","        api.getCallbackBuilder().build().reply(response.toJSONString());","    }","}",""}
14	5	UnblockCard.java	{"package api.methods;","","import api.ApiBean;","import api.IncorrectInputException;","import com.google.gson.JsonSyntaxException;","import com.thetransactioncompany.jsonrpc2.JSONRPC2Response;","import databeans.MessageWrapper;","import databeans.MethodType;","import databeans.PinCard;","import util.JSONParser;","","import java.util.HashMap;","import java.util.Map;","","import static api.ApiService.PREFIX;","import static api.ApiService.MAX_ACCOUNT_NUMBER_LENGTH;","import static api.methods.SharedUtilityMethods.sendErrorReply;","import static java.net.HttpURLConnection.HTTP_OK;","",/**," * @author Saul"," */","public abstract class UnblockCard {","","    /**","     * Unblocks a blocked pin card, requires logging in.","     * @param params Parameters of the request(authToken, iBAN, pinCard).","     * @param api DataBean containing everything in the ApiService","     */","    public static void unblockCard(final Map<String, Object> params, final ApiBean api) {","        String accountNumber = (String) params.get(\\"iBAN\\");","        String pinCard = (String) params.get(\\"pinCard\\");","        String cookie = (String) params.get(\\"authToken\\");","        PinCard request = new PinCard(accountNumber, Long.parseLong(pinCard));","        System.out.printf(\\"%s Sending pinCard unblock request.\\\\n\\", PREFIX);","        handlePinCardUnblockExceptions(request, cookie, api);","    }","","    /**","     * Tries to verify the input of the pinCard unblock and then forward the request, send a rejection if an","     * exception is thrown.","     * @param pinCard {@link PinCard} that should be unblocked.","     * @param cookie Cookie of the User that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void handlePinCardUnblockExceptions(final PinCard pinCard, final String cookie, final ApiBean api) {","        try {","            verifyPinCardInput(pinCard);","            doPinCardUnblockRequest(pinCard, cookie, api);","        } catch (IncorrectInputException e) {","            System.out.printf(\\"%s %s\\", PREFIX, e.getMessage());","            sendErrorReply(JSONParser.createMessageWrapper(true, 418,","                    \\"One of the parameters has an invalid value.\\", e.getMessage()), api);","        } catch (JsonSyntaxException e) {","            System.out.printf(\\"%s The json received contained incorrect syntax, sending rejection.\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 500, \\"Unknown error occurred.\\"), api);","        }","    }","","    /**","     * Checks if the input for an account link request is correctly formatted and contains correct values.","     * @param pinCard {@link PinCard} that should be unblocked.","     * @throws IncorrectInputException Thrown when a value is not correctly specified.","     * @throws JsonSyntaxException Thrown when the json string is incorrect and cant be parsed.","     */","    private static void verifyPinCardInput(final PinCard pinCard)","            throws IncorrectInputException, JsonSyntaxException {","        final String accountNumber = pinCard.getAccountNumber();","        if (accountNumber == null || accountNumber.length() > MAX_ACCOUNT_NUMBER_LENGTH) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: accountNumber.\\");","        }","    }","","    /**","     * Forwards a String representing a pinCard to the Authentication Service, and processes the reply if it is","     * successful or sends a rejection to the requesting source if it fails.","     * @param pinCard {@link PinCard} that should be unblocked.","     * @param cookie Cookie of the User that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void doPinCardUnblockRequest(final PinCard pinCard, final String cookie, final ApiBean api) {","        MessageWrapper data = JSONParser.createMessageWrapper(false, 0, \\"Request\\");","        data.setCookie(cookie);","        data.setMethodType(MethodType.UNBLOCK_CARD);","        data.setData(pinCard);","","        api.getAuthenticationClient().putFormAsyncWith1Param(\\"/services/authentication/unblockCard\\",","                \\"data\\", api.getJsonConverter().toJson(data), ((httpStatusCode, httpContentType, body) -> {","                    if (httpStatusCode == HTTP_OK) {","                        MessageWrapper messageWrapper = api.getJsonConverter().fromJson(","                                JSONParser.removeEscapeCharacters(body), MessageWrapper.class);","                        if (!messageWrapper.isError()) {","                            sendPinCardUnblockRequestCallback((PinCard) messageWrapper.getData(), api);","                        } else {","                            sendErrorReply(messageWrapper, api);","                        }","                    } else {","                        sendErrorReply(JSONParser.createMessageWrapper(true, 500,","                                \\"An unknown error occurred.\\",","                                \\"There was a problem with one of the HTTP requests\\"), api);","                    }","                }));","    }","","    /**","     * Forwards the result of a pinCard unblock request to the service that sent the request.","     * @param pinCard The result of a pinCard unblock request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void sendPinCardUnblockRequestCallback(final PinCard pinCard, final ApiBean api) {","        System.out.printf(\\"%s PinCard unblocked successfully for AccountNumber: %s, CardNumber: %s\\\\n\\\\n\\\\n\\\\n\\",","                PREFIX, pinCard.getAccountNumber(), pinCard.getCardNumber());","        Map<String, Object> result = new HashMap<>();","        JSONRPC2Response response = new JSONRPC2Response(result, api.getId());","        api.getCallbackBuilder().build().reply(response.toJSONString());","    }","}",""}
15	5	TransferMoney.java	{"package api.methods;","","import api.ApiBean;","import api.IncorrectInputException;","import com.google.gson.JsonSyntaxException;","import com.thetransactioncompany.jsonrpc2.JSONRPC2Response;","import databeans.MessageWrapper;","import databeans.MethodType;","import databeans.Transaction;","import util.JSONParser;","","import java.util.HashMap;","import java.util.Map;","","import static api.ApiService.PREFIX;","import static api.ApiService.MAX_ACCOUNT_NUMBER_LENGTH;","import static api.ApiService.DESCRIPTION_LIMIT;","import static api.methods.SharedUtilityMethods.sendErrorReply;","import static api.methods.SharedUtilityMethods.valueHasCorrectLength;","import static java.net.HttpURLConnection.HTTP_OK;","",/**," * @author Saul"," */","public abstract class TransferMoney {","","    /**","     * Transfer money between accounts, the authToken needs to belong to a user that is authorized to make transactions","     * from the sourceAccount.","     * @param params Parameters of the request (authToken, sourceIBAN, targetIBAN, targetName, amount, description).","     * @param api DataBean containing everything in the ApiService","     */","    public static void transferMoney(final Map<String, Object> params, final ApiBean api) {","        String cookie = (String) params.get(\\"authToken\\");","        Transaction transaction = JSONParser.createJsonTransaction(-1, (String) params.get(\\"sourceIBAN\\"),","                (String) params.get(\\"targetIBAN\\"), (String) params.get(\\"targetName\\"),","                (String) params.get(\\"description\\"), (Double) params.get(\\"amount\\"), false, false);","        System.out.printf(\\"%s Sending internal transaction.\\\\n\\", PREFIX);","        handleTransactionExceptions(transaction, cookie, api);","    }","","    /**","     * Tries to verify the input of a transaction request and then forward the request, sends an error if an","     * exception occurs.","     * @param transaction The transaction to test/process","     * @param cookie Cookie of the user that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void handleTransactionExceptions(","            final Transaction transaction, final String cookie, final ApiBean api) {","        try {","            verifyTransactionInput(transaction);","            doTransactionRequest(transaction, cookie, api);","        } catch (IncorrectInputException e) {","            System.out.printf(\\"%s %s, sending rejection.\\\\n\\", PREFIX, e.getMessage());","            sendErrorReply(JSONParser.createMessageWrapper(true, 418,","                    \\"One of the parameters has an invalid value.\\"), api);","        } catch (JsonSyntaxException e) {","            System.out.printf(\\"%s The json received contained incorrect syntax, sending rejection.\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 500,","                    \\"Unknown error occurred.\\", \\"Syntax error when parsing json.\\"), api);","        } catch (NumberFormatException e) {","            System.out.printf(\\"%s The transaction amount was incorrectly specified, sending rejection.\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 418,","                    \\"One of the parameters has an invalid value.\\",","                    \\"The following variable was incorrectly specified: transactionAmount.\\"), api);","        }","    }","","    /**","     * Checks if the input for a transaction request is correctly formatted and contains correct values.","     * @param transaction The transaction request.","     * @throws IncorrectInputException Thrown when a value is not correctly specified.","     * @throws JsonSyntaxException Thrown when the json string is incorrect and cant be parsed.","     * @throws NumberFormatException Thrown when a string value could not be parsed to a Long.","     */","    private static void verifyTransactionInput(final Transaction transaction)","            throws IncorrectInputException, JsonSyntaxException, NumberFormatException {","        final String sourceAccountNumber = transaction.getSourceAccountNumber();","        final String destinationAccountNumber = transaction.getDestinationAccountNumber();","        final String destinationAccountHolderName = transaction.getDestinationAccountHolderName();","        final String transactionDescription = transaction.getDescription();","        final double transactionAmount = transaction.getTransactionAmount();","        if (sourceAccountNumber == null || sourceAccountNumber.length() > MAX_ACCOUNT_NUMBER_LENGTH) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: sourceAccountNumber.\\");","        } else if (destinationAccountNumber == null || destinationAccountNumber.length() > MAX_ACCOUNT_NUMBER_LENGTH) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified:\\"","                    + \\" destinationAccountNumber.\\");","        } else if (destinationAccountHolderName == null || !valueHasCorrectLength(destinationAccountHolderName)) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified:\\"","                    + \\" destinationAccountHolderName.\\");","        } else if (transactionDescription == null || transactionDescription.length() > DESCRIPTION_LIMIT) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified:\\"","                    + \\" transactionDescription.\\");","        } else if (transactionAmount < 0) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: transactionAmount.\\");","        } else if (transaction.isProcessed()) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: isProcessed.\\");","        } else if (transaction.isSuccessful()) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: isSuccessful.\\");","        }","    }","","    /**","     * Forwards transaction request to the Authentication service and forwards the reply or sends a rejection if the","     * request fails.","     * @param transaction Transaction request that should be processed.","     * @param cookie Cookie of the User that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void doTransactionRequest(final Transaction transaction, final String cookie, final ApiBean api) {","        MessageWrapper data = JSONParser.createMessageWrapper(false, 0, \\"Request\\");","        data.setCookie(cookie);","        data.setMethodType(MethodType.TRANSFER_MONEY);","        data.setData(transaction);","","        System.out.printf(\\"%s Forwarding transaction request.\\\\n\\", PREFIX);","        api.getAuthenticationClient().putFormAsyncWith1Param(\\"/services/authentication/transaction\\",","                \\"data\\", api.getJsonConverter().toJson(data),","                (httpStatusCode, httpContentType, transactionReplyJson) -> {","                    if (httpStatusCode == HTTP_OK) {","                        MessageWrapper messageWrapper = api.getJsonConverter().fromJson(","                                JSONParser.removeEscapeCharacters(transactionReplyJson), MessageWrapper.class);","                        if (!messageWrapper.isError()) {","                            sendTransactionCallback((Transaction) messageWrapper.getData(), api);","                        } else {","                            sendErrorReply(messageWrapper, api);","                        }","                    } else {","                        sendErrorReply(JSONParser.createMessageWrapper(true, 500,","                                \\"An unknown error occurred.\\",","                                \\"There was a problem with one of the HTTP requests\\"), api);","                    }","                });","    }","","    /**","     * Forwards the result of a transaction request to the service that sent the request.","     * @param reply The processed transaction","     * @param api DataBean containing everything in the ApiService","     */","    private static void sendTransactionCallback(final Transaction reply, final ApiBean api) {","        if (reply.isSuccessful() && reply.isProcessed()) {","            long transactionId = reply.getTransactionID();","            System.out.printf(\\"%s Internal transaction %d successful.\\\\n\\\\n\\\\n\\\\n\\", PREFIX, transactionId);","            Map<String, Object> result = new HashMap<>();","            JSONRPC2Response response = new JSONRPC2Response(result, api.getId());","            api.getCallbackBuilder().build().reply(response.toJSONString());","        } else {","            System.out.printf(\\"%s Internal transaction was not successful\\\\n\\\\n\\\\n\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 500, \\"Unknown error occurred.\\"), api);","        }","    }","}",""}
17	5	TransferMoney.java	{"package api.methods;","","import api.ApiBean;","import api.IncorrectInputException;","import com.google.gson.JsonSyntaxException;","import com.thetransactioncompany.jsonrpc2.JSONRPC2Response;","import databeans.MessageWrapper;","import databeans.MethodType;","import databeans.Transaction;","import util.JSONParser;","","import java.util.HashMap;","import java.util.Map;","","import static api.ApiService.PREFIX;","import static api.ApiService.MAX_ACCOUNT_NUMBER_LENGTH;","import static api.ApiService.DESCRIPTION_LIMIT;","import static api.methods.SharedUtilityMethods.sendErrorReply;","import static api.methods.SharedUtilityMethods.valueHasCorrectLength;","import static java.net.HttpURLConnection.HTTP_OK;","",/**," * @author Saul"," */","public abstract class TransferMoney {","","    /**","     * Transfer money between accounts, the authToken needs to belong to a user that is authorized to make transactions","     * from the sourceAccount.","     * @param params Parameters of the request (authToken, sourceIBAN, targetIBAN, targetName, amount, description).","     * @param api DataBean containing everything in the ApiService","     */","    public static void transferMoney(final Map<String, Object> params, final ApiBean api) {","        String cookie = (String) params.get(\\"authToken\\");","        Transaction transaction = JSONParser.createJsonTransaction(-1, (String) params.get(\\"sourceIBAN\\"),","                (String) params.get(\\"targetIBAN\\"), (String) params.get(\\"targetName\\"),","                (String) params.get(\\"description\\"), (Double) params.get(\\"amount\\"), false, false);","        System.out.printf(\\"%s Sending internal transaction.\\\\n\\", PREFIX);","        handleTransactionExceptions(transaction, cookie, api);","    }","","    /**","     * Tries to verify the input of a transaction request and then forward the request, sends an error if an","     * exception occurs.","     * @param transaction The transaction to test/process","     * @param cookie Cookie of the user that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void handleTransactionExceptions(","            final Transaction transaction, final String cookie, final ApiBean api) {","        try {","            verifyTransactionInput(transaction);","            doTransactionRequest(transaction, cookie, api);","        } catch (IncorrectInputException e) {","            System.out.printf(\\"%s %s, sending rejection.\\\\n\\", PREFIX, e.getMessage());","            sendErrorReply(JSONParser.createMessageWrapper(true, 418,","                    \\"One of the parameters has an invalid value.\\"), api);","        } catch (JsonSyntaxException e) {","            System.out.printf(\\"%s The json received contained incorrect syntax, sending rejection.\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 500,","                    \\"Unknown error occurred.\\", \\"Syntax error when parsing json.\\"), api);","        } catch (NumberFormatException e) {","            System.out.printf(\\"%s The transaction amount was incorrectly specified, sending rejection.\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 418,","                    \\"One of the parameters has an invalid value.\\",","                    \\"The following variable was incorrectly specified: transactionAmount.\\"), api);","        }","    }","","    /**","     * Checks if the input for a transaction request is correctly formatted and contains correct values.","     * @param transaction The transaction request.","     * @throws IncorrectInputException Thrown when a value is not correctly specified.","     * @throws JsonSyntaxException Thrown when the json string is incorrect and cant be parsed.","     * @throws NumberFormatException Thrown when a string value could not be parsed to a Long.","     */","    private static void verifyTransactionInput(final Transaction transaction)","            throws IncorrectInputException, JsonSyntaxException, NumberFormatException {","        final String sourceAccountNumber = transaction.getSourceAccountNumber();","        final String destinationAccountNumber = transaction.getDestinationAccountNumber();","        final String destinationAccountHolderName = transaction.getDestinationAccountHolderName();","        final String transactionDescription = transaction.getDescription();","        final double transactionAmount = transaction.getTransactionAmount();","        if (sourceAccountNumber == null || sourceAccountNumber.length() > MAX_ACCOUNT_NUMBER_LENGTH) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: sourceAccountNumber.\\");","        } else if (destinationAccountNumber == null || destinationAccountNumber.length() > MAX_ACCOUNT_NUMBER_LENGTH) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified:\\"","                    + \\" destinationAccountNumber.\\");","        } else if (destinationAccountHolderName == null || !valueHasCorrectLength(destinationAccountHolderName)) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified:\\"","                    + \\" destinationAccountHolderName.\\");","        } else if (transactionDescription == null || transactionDescription.length() > DESCRIPTION_LIMIT) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified:\\"","                    + \\" transactionDescription.\\");","        } else if (transactionAmount < 0) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: transactionAmount.\\");","        } else if (transaction.isProcessed()) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: isProcessed.\\");","        } else if (transaction.isSuccessful()) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: isSuccessful.\\");","        }","    }","","    /**","     * Forwards transaction request to the Authentication service and forwards the reply or sends a rejection if the","     * request fails.","     * @param transaction Transaction request that should be processed.","     * @param cookie Cookie of the User that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void doTransactionRequest(final Transaction transaction, final String cookie, final ApiBean api) {","        MessageWrapper data = JSONParser.createMessageWrapper(false, 0, \\"Request\\");","        data.setCookie(cookie);","        data.setMethodType(MethodType.TRANSFER_MONEY);","        data.setData(transaction);","","        System.out.printf(\\"%s Forwarding transaction request.\\\\n\\", PREFIX);","        api.getAuthenticationClient().putFormAsyncWith1Param(\\"/services/authentication/transaction\\",","                \\"data\\", api.getJsonConverter().toJson(data),","                (httpStatusCode, httpContentType, transactionReplyJson) -> {","                    if (httpStatusCode == HTTP_OK) {","                        MessageWrapper messageWrapper = api.getJsonConverter().fromJson(","                                JSONParser.removeEscapeCharacters(transactionReplyJson), MessageWrapper.class);","                        if (!messageWrapper.isError()) {","                            sendTransactionCallback((Transaction) messageWrapper.getData(), api);","                        } else {","                            sendErrorReply(messageWrapper, api);","                        }","                    } else {","                        sendErrorReply(JSONParser.createMessageWrapper(true, 500,","                                \\"An unknown error occurred.\\",","                                \\"There was a problem with one of the HTTP requests\\"), api);","                    }","                });","    }","","    /**","     * Forwards the result of a transaction request to the service that sent the request.","     * @param reply The processed transaction","     * @param api DataBean containing everything in the ApiService","     */","    private static void sendTransactionCallback(final Transaction reply, final ApiBean api) {","        if (reply.isSuccessful() && reply.isProcessed()) {","            long transactionId = reply.getTransactionID();","            System.out.printf(\\"%s Internal transaction %d successful.\\\\n\\\\n\\\\n\\\\n\\", PREFIX, transactionId);","            Map<String, Object> result = new HashMap<>();","            JSONRPC2Response response = new JSONRPC2Response(result, api.getId());","            api.getCallbackBuilder().build().reply(response.toJSONString());","        } else {","            System.out.printf(\\"%s Internal transaction was not successful\\\\n\\\\n\\\\n\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 500, \\"Unknown error occurred.\\"), api);","        }","    }","}",""}
16	5	UnblockCard.java	{"package api.methods;","","import api.ApiBean;","import api.IncorrectInputException;","import com.google.gson.JsonSyntaxException;","import com.thetransactioncompany.jsonrpc2.JSONRPC2Response;","import databeans.MessageWrapper;","import databeans.MethodType;","import databeans.PinCard;","import util.JSONParser;","","import java.util.HashMap;","import java.util.Map;","","import static api.ApiService.PREFIX;","import static api.ApiService.MAX_ACCOUNT_NUMBER_LENGTH;","import static api.methods.SharedUtilityMethods.sendErrorReply;","import static java.net.HttpURLConnection.HTTP_OK;","",/**," * @author Saul"," */","public abstract class UnblockCard {","","    /**","     * Unblocks a blocked pin card, requires logging in.","     * @param params Parameters of the request(authToken, iBAN, pinCard).","     * @param api DataBean containing everything in the ApiService","     */","    public static void unblockCard(final Map<String, Object> params, final ApiBean api) {","        String accountNumber = (String) params.get(\\"iBAN\\");","        String pinCard = (String) params.get(\\"pinCard\\");","        String cookie = (String) params.get(\\"authToken\\");","        PinCard request = new PinCard(accountNumber, Long.parseLong(pinCard));","        System.out.printf(\\"%s Sending pinCard unblock request.\\\\n\\", PREFIX);","        handlePinCardUnblockExceptions(request, cookie, api);","    }","","    /**","     * Tries to verify the input of the pinCard unblock and then forward the request, send a rejection if an","     * exception is thrown.","     * @param pinCard {@link PinCard} that should be unblocked.","     * @param cookie Cookie of the User that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void handlePinCardUnblockExceptions(final PinCard pinCard, final String cookie, final ApiBean api) {","        try {","            verifyPinCardInput(pinCard);","            doPinCardUnblockRequest(pinCard, cookie, api);","        } catch (IncorrectInputException e) {","            System.out.printf(\\"%s %s\\", PREFIX, e.getMessage());","            sendErrorReply(JSONParser.createMessageWrapper(true, 418,","                    \\"One of the parameters has an invalid value.\\", e.getMessage()), api);","        } catch (JsonSyntaxException e) {","            System.out.printf(\\"%s The json received contained incorrect syntax, sending rejection.\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 500, \\"Unknown error occurred.\\"), api);","        }","    }","","    /**","     * Checks if the input for an account link request is correctly formatted and contains correct values.","     * @param pinCard {@link PinCard} that should be unblocked.","     * @throws IncorrectInputException Thrown when a value is not correctly specified.","     * @throws JsonSyntaxException Thrown when the json string is incorrect and cant be parsed.","     */","    private static void verifyPinCardInput(final PinCard pinCard)","            throws IncorrectInputException, JsonSyntaxException {","        final String accountNumber = pinCard.getAccountNumber();","        if (accountNumber == null || accountNumber.length() > MAX_ACCOUNT_NUMBER_LENGTH) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: accountNumber.\\");","        }","    }","","    /**","     * Forwards a String representing a pinCard to the Authentication Service, and processes the reply if it is","     * successful or sends a rejection to the requesting source if it fails.","     * @param pinCard {@link PinCard} that should be unblocked.","     * @param cookie Cookie of the User that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void doPinCardUnblockRequest(final PinCard pinCard, final String cookie, final ApiBean api) {","        MessageWrapper data = JSONParser.createMessageWrapper(false, 0, \\"Request\\");","        data.setCookie(cookie);","        data.setMethodType(MethodType.UNBLOCK_CARD);","        data.setData(pinCard);","","        api.getAuthenticationClient().putFormAsyncWith1Param(\\"/services/authentication/unblockCard\\",","                \\"data\\", api.getJsonConverter().toJson(data), ((httpStatusCode, httpContentType, body) -> {","                    if (httpStatusCode == HTTP_OK) {","                        MessageWrapper messageWrapper = api.getJsonConverter().fromJson(","                                JSONParser.removeEscapeCharacters(body), MessageWrapper.class);","                        if (!messageWrapper.isError()) {","                            sendPinCardUnblockRequestCallback((PinCard) messageWrapper.getData(), api);","                        } else {","                            sendErrorReply(messageWrapper, api);","                        }","                    } else {","                        sendErrorReply(JSONParser.createMessageWrapper(true, 500,","                                \\"An unknown error occurred.\\",","                                \\"There was a problem with one of the HTTP requests\\"), api);","                    }","                }));","    }","","    /**","     * Forwards the result of a pinCard unblock request to the service that sent the request.","     * @param pinCard The result of a pinCard unblock request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void sendPinCardUnblockRequestCallback(final PinCard pinCard, final ApiBean api) {","        System.out.printf(\\"%s PinCard unblocked successfully for AccountNumber: %s, CardNumber: %s\\\\n\\\\n\\\\n\\\\n\\",","                PREFIX, pinCard.getAccountNumber(), pinCard.getCardNumber());","        Map<String, Object> result = new HashMap<>();","        JSONRPC2Response response = new JSONRPC2Response(result, api.getId());","        api.getCallbackBuilder().build().reply(response.toJSONString());","    }","}",""}
19	5	UnblockCard.java	{"package api.methods;","","import api.ApiBean;","import api.IncorrectInputException;","import com.google.gson.JsonSyntaxException;","import com.thetransactioncompany.jsonrpc2.JSONRPC2Response;","import databeans.MessageWrapper;","import databeans.MethodType;","import databeans.PinCard;","import util.JSONParser;","","import java.util.HashMap;","import java.util.Map;","","import static api.ApiService.PREFIX;","import static api.ApiService.MAX_ACCOUNT_NUMBER_LENGTH;","import static api.methods.SharedUtilityMethods.sendErrorReply;","import static java.net.HttpURLConnection.HTTP_OK;","",/**," * @author Saul"," */","public abstract class UnblockCard {","","    /**","     * Unblocks a blocked pin card, requires logging in.","     * @param params Parameters of the request(authToken, iBAN, pinCard).","     * @param api DataBean containing everything in the ApiService","     */","    public static void unblockCard(final Map<String, Object> params, final ApiBean api) {","        String accountNumber = (String) params.get(\\"iBAN\\");","        String pinCard = (String) params.get(\\"pinCard\\");","        String cookie = (String) params.get(\\"authToken\\");","        PinCard request = new PinCard(accountNumber, Long.parseLong(pinCard));","        System.out.printf(\\"%s Sending pinCard unblock request.\\\\n\\", PREFIX);","        handlePinCardUnblockExceptions(request, cookie, api);","    }","","    /**","     * Tries to verify the input of the pinCard unblock and then forward the request, send a rejection if an","     * exception is thrown.","     * @param pinCard {@link PinCard} that should be unblocked.","     * @param cookie Cookie of the User that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void handlePinCardUnblockExceptions(final PinCard pinCard, final String cookie, final ApiBean api) {","        try {","            verifyPinCardInput(pinCard);","            doPinCardUnblockRequest(pinCard, cookie, api);","        } catch (IncorrectInputException e) {","            System.out.printf(\\"%s %s\\", PREFIX, e.getMessage());","            sendErrorReply(JSONParser.createMessageWrapper(true, 418,","                    \\"One of the parameters has an invalid value.\\", e.getMessage()), api);","        } catch (JsonSyntaxException e) {","            System.out.printf(\\"%s The json received contained incorrect syntax, sending rejection.\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 500, \\"Unknown error occurred.\\"), api);","        }","    }","","    /**","     * Checks if the input for an account link request is correctly formatted and contains correct values.","     * @param pinCard {@link PinCard} that should be unblocked.","     * @throws IncorrectInputException Thrown when a value is not correctly specified.","     * @throws JsonSyntaxException Thrown when the json string is incorrect and cant be parsed.","     */","    private static void verifyPinCardInput(final PinCard pinCard)","            throws IncorrectInputException, JsonSyntaxException {","        final String accountNumber = pinCard.getAccountNumber();","        if (accountNumber == null || accountNumber.length() > MAX_ACCOUNT_NUMBER_LENGTH) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: accountNumber.\\");","        }","    }","","    /**","     * Forwards a String representing a pinCard to the Authentication Service, and processes the reply if it is","     * successful or sends a rejection to the requesting source if it fails.","     * @param pinCard {@link PinCard} that should be unblocked.","     * @param cookie Cookie of the User that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void doPinCardUnblockRequest(final PinCard pinCard, final String cookie, final ApiBean api) {","        MessageWrapper data = JSONParser.createMessageWrapper(false, 0, \\"Request\\");","        data.setCookie(cookie);","        data.setMethodType(MethodType.UNBLOCK_CARD);","        data.setData(pinCard);","","        api.getAuthenticationClient().putFormAsyncWith1Param(\\"/services/authentication/unblockCard\\",","                \\"data\\", api.getJsonConverter().toJson(data), ((httpStatusCode, httpContentType, body) -> {","                    if (httpStatusCode == HTTP_OK) {","                        MessageWrapper messageWrapper = api.getJsonConverter().fromJson(","                                JSONParser.removeEscapeCharacters(body), MessageWrapper.class);","                        if (!messageWrapper.isError()) {","                            sendPinCardUnblockRequestCallback((PinCard) messageWrapper.getData(), api);","                        } else {","                            sendErrorReply(messageWrapper, api);","                        }","                    } else {","                        sendErrorReply(JSONParser.createMessageWrapper(true, 500,","                                \\"An unknown error occurred.\\",","                                \\"There was a problem with one of the HTTP requests\\"), api);","                    }","                }));","    }","","    /**","     * Forwards the result of a pinCard unblock request to the service that sent the request.","     * @param pinCard The result of a pinCard unblock request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void sendPinCardUnblockRequestCallback(final PinCard pinCard, final ApiBean api) {","        System.out.printf(\\"%s PinCard unblocked successfully for AccountNumber: %s, CardNumber: %s\\\\n\\\\n\\\\n\\\\n\\",","                PREFIX, pinCard.getAccountNumber(), pinCard.getCardNumber());","        Map<String, Object> result = new HashMap<>();","        JSONRPC2Response response = new JSONRPC2Response(result, api.getId());","        api.getCallbackBuilder().build().reply(response.toJSONString());","    }","}",""}
18	5	TransferMoney.java	{"package api.methods;","","import api.ApiBean;","import api.IncorrectInputException;","import com.google.gson.JsonSyntaxException;","import com.thetransactioncompany.jsonrpc2.JSONRPC2Response;","import databeans.MessageWrapper;","import databeans.MethodType;","import databeans.Transaction;","import util.JSONParser;","","import java.util.HashMap;","import java.util.Map;","","import static api.ApiService.PREFIX;","import static api.ApiService.MAX_ACCOUNT_NUMBER_LENGTH;","import static api.ApiService.DESCRIPTION_LIMIT;","import static api.methods.SharedUtilityMethods.sendErrorReply;","import static api.methods.SharedUtilityMethods.valueHasCorrectLength;","import static java.net.HttpURLConnection.HTTP_OK;","",/**," * @author Saul"," */","public abstract class TransferMoney {","","    /**","     * Transfer money between accounts, the authToken needs to belong to a user that is authorized to make transactions","     * from the sourceAccount.","     * @param params Parameters of the request (authToken, sourceIBAN, targetIBAN, targetName, amount, description).","     * @param api DataBean containing everything in the ApiService","     */","    public static void transferMoney(final Map<String, Object> params, final ApiBean api) {","        String cookie = (String) params.get(\\"authToken\\");","        Transaction transaction = JSONParser.createJsonTransaction(-1, (String) params.get(\\"sourceIBAN\\"),","                (String) params.get(\\"targetIBAN\\"), (String) params.get(\\"targetName\\"),","                (String) params.get(\\"description\\"), (Double) params.get(\\"amount\\"), false, false);","        System.out.printf(\\"%s Sending internal transaction.\\\\n\\", PREFIX);","        handleTransactionExceptions(transaction, cookie, api);","    }","","    /**","     * Tries to verify the input of a transaction request and then forward the request, sends an error if an","     * exception occurs.","     * @param transaction The transaction to test/process","     * @param cookie Cookie of the user that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void handleTransactionExceptions(","            final Transaction transaction, final String cookie, final ApiBean api) {","        try {","            verifyTransactionInput(transaction);","            doTransactionRequest(transaction, cookie, api);","        } catch (IncorrectInputException e) {","            System.out.printf(\\"%s %s, sending rejection.\\\\n\\", PREFIX, e.getMessage());","            sendErrorReply(JSONParser.createMessageWrapper(true, 418,","                    \\"One of the parameters has an invalid value.\\"), api);","        } catch (JsonSyntaxException e) {","            System.out.printf(\\"%s The json received contained incorrect syntax, sending rejection.\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 500,","                    \\"Unknown error occurred.\\", \\"Syntax error when parsing json.\\"), api);","        } catch (NumberFormatException e) {","            System.out.printf(\\"%s The transaction amount was incorrectly specified, sending rejection.\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 418,","                    \\"One of the parameters has an invalid value.\\",","                    \\"The following variable was incorrectly specified: transactionAmount.\\"), api);","        }","    }","","    /**","     * Checks if the input for a transaction request is correctly formatted and contains correct values.","     * @param transaction The transaction request.","     * @throws IncorrectInputException Thrown when a value is not correctly specified.","     * @throws JsonSyntaxException Thrown when the json string is incorrect and cant be parsed.","     * @throws NumberFormatException Thrown when a string value could not be parsed to a Long.","     */","    private static void verifyTransactionInput(final Transaction transaction)","            throws IncorrectInputException, JsonSyntaxException, NumberFormatException {","        final String sourceAccountNumber = transaction.getSourceAccountNumber();","        final String destinationAccountNumber = transaction.getDestinationAccountNumber();","        final String destinationAccountHolderName = transaction.getDestinationAccountHolderName();","        final String transactionDescription = transaction.getDescription();","        final double transactionAmount = transaction.getTransactionAmount();","        if (sourceAccountNumber == null || sourceAccountNumber.length() > MAX_ACCOUNT_NUMBER_LENGTH) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: sourceAccountNumber.\\");","        } else if (destinationAccountNumber == null || destinationAccountNumber.length() > MAX_ACCOUNT_NUMBER_LENGTH) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified:\\"","                    + \\" destinationAccountNumber.\\");","        } else if (destinationAccountHolderName == null || !valueHasCorrectLength(destinationAccountHolderName)) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified:\\"","                    + \\" destinationAccountHolderName.\\");","        } else if (transactionDescription == null || transactionDescription.length() > DESCRIPTION_LIMIT) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified:\\"","                    + \\" transactionDescription.\\");","        } else if (transactionAmount < 0) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: transactionAmount.\\");","        } else if (transaction.isProcessed()) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: isProcessed.\\");","        } else if (transaction.isSuccessful()) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: isSuccessful.\\");","        }","    }","","    /**","     * Forwards transaction request to the Authentication service and forwards the reply or sends a rejection if the","     * request fails.","     * @param transaction Transaction request that should be processed.","     * @param cookie Cookie of the User that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void doTransactionRequest(final Transaction transaction, final String cookie, final ApiBean api) {","        MessageWrapper data = JSONParser.createMessageWrapper(false, 0, \\"Request\\");","        data.setCookie(cookie);","        data.setMethodType(MethodType.TRANSFER_MONEY);","        data.setData(transaction);","","        System.out.printf(\\"%s Forwarding transaction request.\\\\n\\", PREFIX);","        api.getAuthenticationClient().putFormAsyncWith1Param(\\"/services/authentication/transaction\\",","                \\"data\\", api.getJsonConverter().toJson(data),","                (httpStatusCode, httpContentType, transactionReplyJson) -> {","                    if (httpStatusCode == HTTP_OK) {","                        MessageWrapper messageWrapper = api.getJsonConverter().fromJson(","                                JSONParser.removeEscapeCharacters(transactionReplyJson), MessageWrapper.class);","                        if (!messageWrapper.isError()) {","                            sendTransactionCallback((Transaction) messageWrapper.getData(), api);","                        } else {","                            sendErrorReply(messageWrapper, api);","                        }","                    } else {","                        sendErrorReply(JSONParser.createMessageWrapper(true, 500,","                                \\"An unknown error occurred.\\",","                                \\"There was a problem with one of the HTTP requests\\"), api);","                    }","                });","    }","","    /**","     * Forwards the result of a transaction request to the service that sent the request.","     * @param reply The processed transaction","     * @param api DataBean containing everything in the ApiService","     */","    private static void sendTransactionCallback(final Transaction reply, final ApiBean api) {","        if (reply.isSuccessful() && reply.isProcessed()) {","            long transactionId = reply.getTransactionID();","            System.out.printf(\\"%s Internal transaction %d successful.\\\\n\\\\n\\\\n\\\\n\\", PREFIX, transactionId);","            Map<String, Object> result = new HashMap<>();","            JSONRPC2Response response = new JSONRPC2Response(result, api.getId());","            api.getCallbackBuilder().build().reply(response.toJSONString());","        } else {","            System.out.printf(\\"%s Internal transaction was not successful\\\\n\\\\n\\\\n\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 500, \\"Unknown error occurred.\\"), api);","        }","    }","}",""}
20	5	UnblockCard.java	{"package api.methods;","","import api.ApiBean;","import api.IncorrectInputException;","import com.google.gson.JsonSyntaxException;","import com.thetransactioncompany.jsonrpc2.JSONRPC2Response;","import databeans.MessageWrapper;","import databeans.MethodType;","import databeans.PinCard;","import util.JSONParser;","","import java.util.HashMap;","import java.util.Map;","","import static api.ApiService.PREFIX;","import static api.ApiService.MAX_ACCOUNT_NUMBER_LENGTH;","import static api.methods.SharedUtilityMethods.sendErrorReply;","import static java.net.HttpURLConnection.HTTP_OK;","",/**," * @author Saul"," */","public abstract class UnblockCard {","","    /**","     * Unblocks a blocked pin card, requires logging in.","     * @param params Parameters of the request(authToken, iBAN, pinCard).","     * @param api DataBean containing everything in the ApiService","     */","    public static void unblockCard(final Map<String, Object> params, final ApiBean api) {","        String accountNumber = (String) params.get(\\"iBAN\\");","        String pinCard = (String) params.get(\\"pinCard\\");","        String cookie = (String) params.get(\\"authToken\\");","        PinCard request = new PinCard(accountNumber, Long.parseLong(pinCard));","        System.out.printf(\\"%s Sending pinCard unblock request.\\\\n\\", PREFIX);","        handlePinCardUnblockExceptions(request, cookie, api);","    }","","    /**","     * Tries to verify the input of the pinCard unblock and then forward the request, send a rejection if an","     * exception is thrown.","     * @param pinCard {@link PinCard} that should be unblocked.","     * @param cookie Cookie of the User that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void handlePinCardUnblockExceptions(final PinCard pinCard, final String cookie, final ApiBean api) {","        try {","            verifyPinCardInput(pinCard);","            doPinCardUnblockRequest(pinCard, cookie, api);","        } catch (IncorrectInputException e) {","            System.out.printf(\\"%s %s\\", PREFIX, e.getMessage());","            sendErrorReply(JSONParser.createMessageWrapper(true, 418,","                    \\"One of the parameters has an invalid value.\\", e.getMessage()), api);","        } catch (JsonSyntaxException e) {","            System.out.printf(\\"%s The json received contained incorrect syntax, sending rejection.\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 500, \\"Unknown error occurred.\\"), api);","        }","    }","","    /**","     * Checks if the input for an account link request is correctly formatted and contains correct values.","     * @param pinCard {@link PinCard} that should be unblocked.","     * @throws IncorrectInputException Thrown when a value is not correctly specified.","     * @throws JsonSyntaxException Thrown when the json string is incorrect and cant be parsed.","     */","    private static void verifyPinCardInput(final PinCard pinCard)","            throws IncorrectInputException, JsonSyntaxException {","        final String accountNumber = pinCard.getAccountNumber();","        if (accountNumber == null || accountNumber.length() > MAX_ACCOUNT_NUMBER_LENGTH) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: accountNumber.\\");","        }","    }","","    /**","     * Forwards a String representing a pinCard to the Authentication Service, and processes the reply if it is","     * successful or sends a rejection to the requesting source if it fails.","     * @param pinCard {@link PinCard} that should be unblocked.","     * @param cookie Cookie of the User that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void doPinCardUnblockRequest(final PinCard pinCard, final String cookie, final ApiBean api) {","        MessageWrapper data = JSONParser.createMessageWrapper(false, 0, \\"Request\\");","        data.setCookie(cookie);","        data.setMethodType(MethodType.UNBLOCK_CARD);","        data.setData(pinCard);","","        api.getAuthenticationClient().putFormAsyncWith1Param(\\"/services/authentication/unblockCard\\",","                \\"data\\", api.getJsonConverter().toJson(data), ((httpStatusCode, httpContentType, body) -> {","                    if (httpStatusCode == HTTP_OK) {","                        MessageWrapper messageWrapper = api.getJsonConverter().fromJson(","                                JSONParser.removeEscapeCharacters(body), MessageWrapper.class);","                        if (!messageWrapper.isError()) {","                            sendPinCardUnblockRequestCallback((PinCard) messageWrapper.getData(), api);","                        } else {","                            sendErrorReply(messageWrapper, api);","                        }","                    } else {","                        sendErrorReply(JSONParser.createMessageWrapper(true, 500,","                                \\"An unknown error occurred.\\",","                                \\"There was a problem with one of the HTTP requests\\"), api);","                    }","                }));","    }","","    /**","     * Forwards the result of a pinCard unblock request to the service that sent the request.","     * @param pinCard The result of a pinCard unblock request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void sendPinCardUnblockRequestCallback(final PinCard pinCard, final ApiBean api) {","        System.out.printf(\\"%s PinCard unblocked successfully for AccountNumber: %s, CardNumber: %s\\\\n\\\\n\\\\n\\\\n\\",","                PREFIX, pinCard.getAccountNumber(), pinCard.getCardNumber());","        Map<String, Object> result = new HashMap<>();","        JSONRPC2Response response = new JSONRPC2Response(result, api.getId());","        api.getCallbackBuilder().build().reply(response.toJSONString());","    }","}",""}
21	5	TransferMoney.java	{"package api.methods;","","import api.ApiBean;","import api.IncorrectInputException;","import com.google.gson.JsonSyntaxException;","import com.thetransactioncompany.jsonrpc2.JSONRPC2Response;","import databeans.MessageWrapper;","import databeans.MethodType;","import databeans.Transaction;","import util.JSONParser;","","import java.util.HashMap;","import java.util.Map;","","import static api.ApiService.PREFIX;","import static api.ApiService.MAX_ACCOUNT_NUMBER_LENGTH;","import static api.ApiService.DESCRIPTION_LIMIT;","import static api.methods.SharedUtilityMethods.sendErrorReply;","import static api.methods.SharedUtilityMethods.valueHasCorrectLength;","import static java.net.HttpURLConnection.HTTP_OK;","",/**," * @author Saul"," */","public abstract class TransferMoney {","","    /**","     * Transfer money between accounts, the authToken needs to belong to a user that is authorized to make transactions","     * from the sourceAccount.","     * @param params Parameters of the request (authToken, sourceIBAN, targetIBAN, targetName, amount, description).","     * @param api DataBean containing everything in the ApiService","     */","    public static void transferMoney(final Map<String, Object> params, final ApiBean api) {","        String cookie = (String) params.get(\\"authToken\\");","        Transaction transaction = JSONParser.createJsonTransaction(-1, (String) params.get(\\"sourceIBAN\\"),","                (String) params.get(\\"targetIBAN\\"), (String) params.get(\\"targetName\\"),","                (String) params.get(\\"description\\"), (Double) params.get(\\"amount\\"), false, false);","        System.out.printf(\\"%s Sending internal transaction.\\\\n\\", PREFIX);","        handleTransactionExceptions(transaction, cookie, api);","    }","","    /**","     * Tries to verify the input of a transaction request and then forward the request, sends an error if an","     * exception occurs.","     * @param transaction The transaction to test/process","     * @param cookie Cookie of the user that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void handleTransactionExceptions(","            final Transaction transaction, final String cookie, final ApiBean api) {","        try {","            verifyTransactionInput(transaction);","            doTransactionRequest(transaction, cookie, api);","        } catch (IncorrectInputException e) {","            System.out.printf(\\"%s %s, sending rejection.\\\\n\\", PREFIX, e.getMessage());","            sendErrorReply(JSONParser.createMessageWrapper(true, 418,","                    \\"One of the parameters has an invalid value.\\"), api);","        } catch (JsonSyntaxException e) {","            System.out.printf(\\"%s The json received contained incorrect syntax, sending rejection.\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 500,","                    \\"Unknown error occurred.\\", \\"Syntax error when parsing json.\\"), api);","        } catch (NumberFormatException e) {","            System.out.printf(\\"%s The transaction amount was incorrectly specified, sending rejection.\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 418,","                    \\"One of the parameters has an invalid value.\\",","                    \\"The following variable was incorrectly specified: transactionAmount.\\"), api);","        }","    }","","    /**","     * Checks if the input for a transaction request is correctly formatted and contains correct values.","     * @param transaction The transaction request.","     * @throws IncorrectInputException Thrown when a value is not correctly specified.","     * @throws JsonSyntaxException Thrown when the json string is incorrect and cant be parsed.","     * @throws NumberFormatException Thrown when a string value could not be parsed to a Long.","     */","    private static void verifyTransactionInput(final Transaction transaction)","            throws IncorrectInputException, JsonSyntaxException, NumberFormatException {","        final String sourceAccountNumber = transaction.getSourceAccountNumber();","        final String destinationAccountNumber = transaction.getDestinationAccountNumber();","        final String destinationAccountHolderName = transaction.getDestinationAccountHolderName();","        final String transactionDescription = transaction.getDescription();","        final double transactionAmount = transaction.getTransactionAmount();","        if (sourceAccountNumber == null || sourceAccountNumber.length() > MAX_ACCOUNT_NUMBER_LENGTH) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: sourceAccountNumber.\\");","        } else if (destinationAccountNumber == null || destinationAccountNumber.length() > MAX_ACCOUNT_NUMBER_LENGTH) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified:\\"","                    + \\" destinationAccountNumber.\\");","        } else if (destinationAccountHolderName == null || !valueHasCorrectLength(destinationAccountHolderName)) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified:\\"","                    + \\" destinationAccountHolderName.\\");","        } else if (transactionDescription == null || transactionDescription.length() > DESCRIPTION_LIMIT) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified:\\"","                    + \\" transactionDescription.\\");","        } else if (transactionAmount < 0) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: transactionAmount.\\");","        } else if (transaction.isProcessed()) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: isProcessed.\\");","        } else if (transaction.isSuccessful()) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: isSuccessful.\\");","        }","    }","","    /**","     * Forwards transaction request to the Authentication service and forwards the reply or sends a rejection if the","     * request fails.","     * @param transaction Transaction request that should be processed.","     * @param cookie Cookie of the User that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void doTransactionRequest(final Transaction transaction, final String cookie, final ApiBean api) {","        MessageWrapper data = JSONParser.createMessageWrapper(false, 0, \\"Request\\");","        data.setCookie(cookie);","        data.setMethodType(MethodType.TRANSFER_MONEY);","        data.setData(transaction);","","        System.out.printf(\\"%s Forwarding transaction request.\\\\n\\", PREFIX);","        api.getAuthenticationClient().putFormAsyncWith1Param(\\"/services/authentication/transaction\\",","                \\"data\\", api.getJsonConverter().toJson(data),","                (httpStatusCode, httpContentType, transactionReplyJson) -> {","                    if (httpStatusCode == HTTP_OK) {","                        MessageWrapper messageWrapper = api.getJsonConverter().fromJson(","                                JSONParser.removeEscapeCharacters(transactionReplyJson), MessageWrapper.class);","                        if (!messageWrapper.isError()) {","                            sendTransactionCallback((Transaction) messageWrapper.getData(), api);","                        } else {","                            sendErrorReply(messageWrapper, api);","                        }","                    } else {","                        sendErrorReply(JSONParser.createMessageWrapper(true, 500,","                                \\"An unknown error occurred.\\",","                                \\"There was a problem with one of the HTTP requests\\"), api);","                    }","                });","    }","","    /**","     * Forwards the result of a transaction request to the service that sent the request.","     * @param reply The processed transaction","     * @param api DataBean containing everything in the ApiService","     */","    private static void sendTransactionCallback(final Transaction reply, final ApiBean api) {","        if (reply.isSuccessful() && reply.isProcessed()) {","            long transactionId = reply.getTransactionID();","            System.out.printf(\\"%s Internal transaction %d successful.\\\\n\\\\n\\\\n\\\\n\\", PREFIX, transactionId);","            Map<String, Object> result = new HashMap<>();","            JSONRPC2Response response = new JSONRPC2Response(result, api.getId());","            api.getCallbackBuilder().build().reply(response.toJSONString());","        } else {","            System.out.printf(\\"%s Internal transaction was not successful\\\\n\\\\n\\\\n\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 500, \\"Unknown error occurred.\\"), api);","        }","    }","}",""}
23	5	TransferMoney.java	{"package api.methods;","","import api.ApiBean;","import api.IncorrectInputException;","import com.google.gson.JsonSyntaxException;","import com.thetransactioncompany.jsonrpc2.JSONRPC2Response;","import databeans.MessageWrapper;","import databeans.MethodType;","import databeans.Transaction;","import util.JSONParser;","","import java.util.HashMap;","import java.util.Map;","","import static api.ApiService.PREFIX;","import static api.ApiService.MAX_ACCOUNT_NUMBER_LENGTH;","import static api.ApiService.DESCRIPTION_LIMIT;","import static api.methods.SharedUtilityMethods.sendErrorReply;","import static api.methods.SharedUtilityMethods.valueHasCorrectLength;","import static java.net.HttpURLConnection.HTTP_OK;","",/**," * @author Saul"," */","public abstract class TransferMoney {","","    /**","     * Transfer money between accounts, the authToken needs to belong to a user that is authorized to make transactions","     * from the sourceAccount.","     * @param params Parameters of the request (authToken, sourceIBAN, targetIBAN, targetName, amount, description).","     * @param api DataBean containing everything in the ApiService","     */","    public static void transferMoney(final Map<String, Object> params, final ApiBean api) {","        String cookie = (String) params.get(\\"authToken\\");","        Transaction transaction = JSONParser.createJsonTransaction(-1, (String) params.get(\\"sourceIBAN\\"),","                (String) params.get(\\"targetIBAN\\"), (String) params.get(\\"targetName\\"),","                (String) params.get(\\"description\\"), (Double) params.get(\\"amount\\"), false, false);","        System.out.printf(\\"%s Sending internal transaction.\\\\n\\", PREFIX);","        handleTransactionExceptions(transaction, cookie, api);","    }","","    /**","     * Tries to verify the input of a transaction request and then forward the request, sends an error if an","     * exception occurs.","     * @param transaction The transaction to test/process","     * @param cookie Cookie of the user that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void handleTransactionExceptions(","            final Transaction transaction, final String cookie, final ApiBean api) {","        try {","            verifyTransactionInput(transaction);","            doTransactionRequest(transaction, cookie, api);","        } catch (IncorrectInputException e) {","            System.out.printf(\\"%s %s, sending rejection.\\\\n\\", PREFIX, e.getMessage());","            sendErrorReply(JSONParser.createMessageWrapper(true, 418,","                    \\"One of the parameters has an invalid value.\\"), api);","        } catch (JsonSyntaxException e) {","            System.out.printf(\\"%s The json received contained incorrect syntax, sending rejection.\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 500,","                    \\"Unknown error occurred.\\", \\"Syntax error when parsing json.\\"), api);","        } catch (NumberFormatException e) {","            System.out.printf(\\"%s The transaction amount was incorrectly specified, sending rejection.\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 418,","                    \\"One of the parameters has an invalid value.\\",","                    \\"The following variable was incorrectly specified: transactionAmount.\\"), api);","        }","    }","","    /**","     * Checks if the input for a transaction request is correctly formatted and contains correct values.","     * @param transaction The transaction request.","     * @throws IncorrectInputException Thrown when a value is not correctly specified.","     * @throws JsonSyntaxException Thrown when the json string is incorrect and cant be parsed.","     * @throws NumberFormatException Thrown when a string value could not be parsed to a Long.","     */","    private static void verifyTransactionInput(final Transaction transaction)","            throws IncorrectInputException, JsonSyntaxException, NumberFormatException {","        final String sourceAccountNumber = transaction.getSourceAccountNumber();","        final String destinationAccountNumber = transaction.getDestinationAccountNumber();","        final String destinationAccountHolderName = transaction.getDestinationAccountHolderName();","        final String transactionDescription = transaction.getDescription();","        final double transactionAmount = transaction.getTransactionAmount();","        if (sourceAccountNumber == null || sourceAccountNumber.length() > MAX_ACCOUNT_NUMBER_LENGTH) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: sourceAccountNumber.\\");","        } else if (destinationAccountNumber == null || destinationAccountNumber.length() > MAX_ACCOUNT_NUMBER_LENGTH) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified:\\"","                    + \\" destinationAccountNumber.\\");","        } else if (destinationAccountHolderName == null || !valueHasCorrectLength(destinationAccountHolderName)) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified:\\"","                    + \\" destinationAccountHolderName.\\");","        } else if (transactionDescription == null || transactionDescription.length() > DESCRIPTION_LIMIT) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified:\\"","                    + \\" transactionDescription.\\");","        } else if (transactionAmount < 0) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: transactionAmount.\\");","        } else if (transaction.isProcessed()) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: isProcessed.\\");","        } else if (transaction.isSuccessful()) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: isSuccessful.\\");","        }","    }","","    /**","     * Forwards transaction request to the Authentication service and forwards the reply or sends a rejection if the","     * request fails.","     * @param transaction Transaction request that should be processed.","     * @param cookie Cookie of the User that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void doTransactionRequest(final Transaction transaction, final String cookie, final ApiBean api) {","        MessageWrapper data = JSONParser.createMessageWrapper(false, 0, \\"Request\\");","        data.setCookie(cookie);","        data.setMethodType(MethodType.TRANSFER_MONEY);","        data.setData(transaction);","","        System.out.printf(\\"%s Forwarding transaction request.\\\\n\\", PREFIX);","        api.getAuthenticationClient().putFormAsyncWith1Param(\\"/services/authentication/transaction\\",","                \\"data\\", api.getJsonConverter().toJson(data),","                (httpStatusCode, httpContentType, transactionReplyJson) -> {","                    if (httpStatusCode == HTTP_OK) {","                        MessageWrapper messageWrapper = api.getJsonConverter().fromJson(","                                JSONParser.removeEscapeCharacters(transactionReplyJson), MessageWrapper.class);","                        if (!messageWrapper.isError()) {","                            sendTransactionCallback((Transaction) messageWrapper.getData(), api);","                        } else {","                            sendErrorReply(messageWrapper, api);","                        }","                    } else {","                        sendErrorReply(JSONParser.createMessageWrapper(true, 500,","                                \\"An unknown error occurred.\\",","                                \\"There was a problem with one of the HTTP requests\\"), api);","                    }","                });","    }","","    /**","     * Forwards the result of a transaction request to the service that sent the request.","     * @param reply The processed transaction","     * @param api DataBean containing everything in the ApiService","     */","    private static void sendTransactionCallback(final Transaction reply, final ApiBean api) {","        if (reply.isSuccessful() && reply.isProcessed()) {","            long transactionId = reply.getTransactionID();","            System.out.printf(\\"%s Internal transaction %d successful.\\\\n\\\\n\\\\n\\\\n\\", PREFIX, transactionId);","            Map<String, Object> result = new HashMap<>();","            JSONRPC2Response response = new JSONRPC2Response(result, api.getId());","            api.getCallbackBuilder().build().reply(response.toJSONString());","        } else {","            System.out.printf(\\"%s Internal transaction was not successful\\\\n\\\\n\\\\n\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 500, \\"Unknown error occurred.\\"), api);","        }","    }","}",""}
22	5	UnblockCard.java	{"package api.methods;","","import api.ApiBean;","import api.IncorrectInputException;","import com.google.gson.JsonSyntaxException;","import com.thetransactioncompany.jsonrpc2.JSONRPC2Response;","import databeans.MessageWrapper;","import databeans.MethodType;","import databeans.PinCard;","import util.JSONParser;","","import java.util.HashMap;","import java.util.Map;","","import static api.ApiService.PREFIX;","import static api.ApiService.MAX_ACCOUNT_NUMBER_LENGTH;","import static api.methods.SharedUtilityMethods.sendErrorReply;","import static java.net.HttpURLConnection.HTTP_OK;","",/**," * @author Saul"," */","public abstract class UnblockCard {","","    /**","     * Unblocks a blocked pin card, requires logging in.","     * @param params Parameters of the request(authToken, iBAN, pinCard).","     * @param api DataBean containing everything in the ApiService","     */","    public static void unblockCard(final Map<String, Object> params, final ApiBean api) {","        String accountNumber = (String) params.get(\\"iBAN\\");","        String pinCard = (String) params.get(\\"pinCard\\");","        String cookie = (String) params.get(\\"authToken\\");","        PinCard request = new PinCard(accountNumber, Long.parseLong(pinCard));","        System.out.printf(\\"%s Sending pinCard unblock request.\\\\n\\", PREFIX);","        handlePinCardUnblockExceptions(request, cookie, api);","    }","","    /**","     * Tries to verify the input of the pinCard unblock and then forward the request, send a rejection if an","     * exception is thrown.","     * @param pinCard {@link PinCard} that should be unblocked.","     * @param cookie Cookie of the User that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void handlePinCardUnblockExceptions(final PinCard pinCard, final String cookie, final ApiBean api) {","        try {","            verifyPinCardInput(pinCard);","            doPinCardUnblockRequest(pinCard, cookie, api);","        } catch (IncorrectInputException e) {","            System.out.printf(\\"%s %s\\", PREFIX, e.getMessage());","            sendErrorReply(JSONParser.createMessageWrapper(true, 418,","                    \\"One of the parameters has an invalid value.\\", e.getMessage()), api);","        } catch (JsonSyntaxException e) {","            System.out.printf(\\"%s The json received contained incorrect syntax, sending rejection.\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 500, \\"Unknown error occurred.\\"), api);","        }","    }","","    /**","     * Checks if the input for an account link request is correctly formatted and contains correct values.","     * @param pinCard {@link PinCard} that should be unblocked.","     * @throws IncorrectInputException Thrown when a value is not correctly specified.","     * @throws JsonSyntaxException Thrown when the json string is incorrect and cant be parsed.","     */","    private static void verifyPinCardInput(final PinCard pinCard)","            throws IncorrectInputException, JsonSyntaxException {","        final String accountNumber = pinCard.getAccountNumber();","        if (accountNumber == null || accountNumber.length() > MAX_ACCOUNT_NUMBER_LENGTH) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: accountNumber.\\");","        }","    }","","    /**","     * Forwards a String representing a pinCard to the Authentication Service, and processes the reply if it is","     * successful or sends a rejection to the requesting source if it fails.","     * @param pinCard {@link PinCard} that should be unblocked.","     * @param cookie Cookie of the User that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void doPinCardUnblockRequest(final PinCard pinCard, final String cookie, final ApiBean api) {","        MessageWrapper data = JSONParser.createMessageWrapper(false, 0, \\"Request\\");","        data.setCookie(cookie);","        data.setMethodType(MethodType.UNBLOCK_CARD);","        data.setData(pinCard);","","        api.getAuthenticationClient().putFormAsyncWith1Param(\\"/services/authentication/unblockCard\\",","                \\"data\\", api.getJsonConverter().toJson(data), ((httpStatusCode, httpContentType, body) -> {","                    if (httpStatusCode == HTTP_OK) {","                        MessageWrapper messageWrapper = api.getJsonConverter().fromJson(","                                JSONParser.removeEscapeCharacters(body), MessageWrapper.class);","                        if (!messageWrapper.isError()) {","                            sendPinCardUnblockRequestCallback((PinCard) messageWrapper.getData(), api);","                        } else {","                            sendErrorReply(messageWrapper, api);","                        }","                    } else {","                        sendErrorReply(JSONParser.createMessageWrapper(true, 500,","                                \\"An unknown error occurred.\\",","                                \\"There was a problem with one of the HTTP requests\\"), api);","                    }","                }));","    }","","    /**","     * Forwards the result of a pinCard unblock request to the service that sent the request.","     * @param pinCard The result of a pinCard unblock request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void sendPinCardUnblockRequestCallback(final PinCard pinCard, final ApiBean api) {","        System.out.printf(\\"%s PinCard unblocked successfully for AccountNumber: %s, CardNumber: %s\\\\n\\\\n\\\\n\\\\n\\",","                PREFIX, pinCard.getAccountNumber(), pinCard.getCardNumber());","        Map<String, Object> result = new HashMap<>();","        JSONRPC2Response response = new JSONRPC2Response(result, api.getId());","        api.getCallbackBuilder().build().reply(response.toJSONString());","    }","}",""}
24	5	UnblockCard.java	{"package api.methods;","","import api.ApiBean;","import api.IncorrectInputException;","import com.google.gson.JsonSyntaxException;","import com.thetransactioncompany.jsonrpc2.JSONRPC2Response;","import databeans.MessageWrapper;","import databeans.MethodType;","import databeans.PinCard;","import util.JSONParser;","","import java.util.HashMap;","import java.util.Map;","","import static api.ApiService.PREFIX;","import static api.ApiService.MAX_ACCOUNT_NUMBER_LENGTH;","import static api.methods.SharedUtilityMethods.sendErrorReply;","import static java.net.HttpURLConnection.HTTP_OK;","",/**," * @author Saul"," */","public abstract class UnblockCard {","","    /**","     * Unblocks a blocked pin card, requires logging in.","     * @param params Parameters of the request(authToken, iBAN, pinCard).","     * @param api DataBean containing everything in the ApiService","     */","    public static void unblockCard(final Map<String, Object> params, final ApiBean api) {","        String accountNumber = (String) params.get(\\"iBAN\\");","        String pinCard = (String) params.get(\\"pinCard\\");","        String cookie = (String) params.get(\\"authToken\\");","        PinCard request = new PinCard(accountNumber, Long.parseLong(pinCard));","        System.out.printf(\\"%s Sending pinCard unblock request.\\\\n\\", PREFIX);","        handlePinCardUnblockExceptions(request, cookie, api);","    }","","    /**","     * Tries to verify the input of the pinCard unblock and then forward the request, send a rejection if an","     * exception is thrown.","     * @param pinCard {@link PinCard} that should be unblocked.","     * @param cookie Cookie of the User that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void handlePinCardUnblockExceptions(final PinCard pinCard, final String cookie, final ApiBean api) {","        try {","            verifyPinCardInput(pinCard);","            doPinCardUnblockRequest(pinCard, cookie, api);","        } catch (IncorrectInputException e) {","            System.out.printf(\\"%s %s\\", PREFIX, e.getMessage());","            sendErrorReply(JSONParser.createMessageWrapper(true, 418,","                    \\"One of the parameters has an invalid value.\\", e.getMessage()), api);","        } catch (JsonSyntaxException e) {","            System.out.printf(\\"%s The json received contained incorrect syntax, sending rejection.\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 500, \\"Unknown error occurred.\\"), api);","        }","    }","","    /**","     * Checks if the input for an account link request is correctly formatted and contains correct values.","     * @param pinCard {@link PinCard} that should be unblocked.","     * @throws IncorrectInputException Thrown when a value is not correctly specified.","     * @throws JsonSyntaxException Thrown when the json string is incorrect and cant be parsed.","     */","    private static void verifyPinCardInput(final PinCard pinCard)","            throws IncorrectInputException, JsonSyntaxException {","        final String accountNumber = pinCard.getAccountNumber();","        if (accountNumber == null || accountNumber.length() > MAX_ACCOUNT_NUMBER_LENGTH) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: accountNumber.\\");","        }","    }","","    /**","     * Forwards a String representing a pinCard to the Authentication Service, and processes the reply if it is","     * successful or sends a rejection to the requesting source if it fails.","     * @param pinCard {@link PinCard} that should be unblocked.","     * @param cookie Cookie of the User that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void doPinCardUnblockRequest(final PinCard pinCard, final String cookie, final ApiBean api) {","        MessageWrapper data = JSONParser.createMessageWrapper(false, 0, \\"Request\\");","        data.setCookie(cookie);","        data.setMethodType(MethodType.UNBLOCK_CARD);","        data.setData(pinCard);","","        api.getAuthenticationClient().putFormAsyncWith1Param(\\"/services/authentication/unblockCard\\",","                \\"data\\", api.getJsonConverter().toJson(data), ((httpStatusCode, httpContentType, body) -> {","                    if (httpStatusCode == HTTP_OK) {","                        MessageWrapper messageWrapper = api.getJsonConverter().fromJson(","                                JSONParser.removeEscapeCharacters(body), MessageWrapper.class);","                        if (!messageWrapper.isError()) {","                            sendPinCardUnblockRequestCallback((PinCard) messageWrapper.getData(), api);","                        } else {","                            sendErrorReply(messageWrapper, api);","                        }","                    } else {","                        sendErrorReply(JSONParser.createMessageWrapper(true, 500,","                                \\"An unknown error occurred.\\",","                                \\"There was a problem with one of the HTTP requests\\"), api);","                    }","                }));","    }","","    /**","     * Forwards the result of a pinCard unblock request to the service that sent the request.","     * @param pinCard The result of a pinCard unblock request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void sendPinCardUnblockRequestCallback(final PinCard pinCard, final ApiBean api) {","        System.out.printf(\\"%s PinCard unblocked successfully for AccountNumber: %s, CardNumber: %s\\\\n\\\\n\\\\n\\\\n\\",","                PREFIX, pinCard.getAccountNumber(), pinCard.getCardNumber());","        Map<String, Object> result = new HashMap<>();","        JSONRPC2Response response = new JSONRPC2Response(result, api.getId());","        api.getCallbackBuilder().build().reply(response.toJSONString());","    }","}",""}
25	5	TransferMoney.java	{"package api.methods;","","import api.ApiBean;","import api.IncorrectInputException;","import com.google.gson.JsonSyntaxException;","import com.thetransactioncompany.jsonrpc2.JSONRPC2Response;","import databeans.MessageWrapper;","import databeans.MethodType;","import databeans.Transaction;","import util.JSONParser;","","import java.util.HashMap;","import java.util.Map;","","import static api.ApiService.PREFIX;","import static api.ApiService.MAX_ACCOUNT_NUMBER_LENGTH;","import static api.ApiService.DESCRIPTION_LIMIT;","import static api.methods.SharedUtilityMethods.sendErrorReply;","import static api.methods.SharedUtilityMethods.valueHasCorrectLength;","import static java.net.HttpURLConnection.HTTP_OK;","",/**," * @author Saul"," */","public abstract class TransferMoney {","","    /**","     * Transfer money between accounts, the authToken needs to belong to a user that is authorized to make transactions","     * from the sourceAccount.","     * @param params Parameters of the request (authToken, sourceIBAN, targetIBAN, targetName, amount, description).","     * @param api DataBean containing everything in the ApiService","     */","    public static void transferMoney(final Map<String, Object> params, final ApiBean api) {","        String cookie = (String) params.get(\\"authToken\\");","        Transaction transaction = JSONParser.createJsonTransaction(-1, (String) params.get(\\"sourceIBAN\\"),","                (String) params.get(\\"targetIBAN\\"), (String) params.get(\\"targetName\\"),","                (String) params.get(\\"description\\"), (Double) params.get(\\"amount\\"), false, false);","        System.out.printf(\\"%s Sending internal transaction.\\\\n\\", PREFIX);","        handleTransactionExceptions(transaction, cookie, api);","    }","","    /**","     * Tries to verify the input of a transaction request and then forward the request, sends an error if an","     * exception occurs.","     * @param transaction The transaction to test/process","     * @param cookie Cookie of the user that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void handleTransactionExceptions(","            final Transaction transaction, final String cookie, final ApiBean api) {","        try {","            verifyTransactionInput(transaction);","            doTransactionRequest(transaction, cookie, api);","        } catch (IncorrectInputException e) {","            System.out.printf(\\"%s %s, sending rejection.\\\\n\\", PREFIX, e.getMessage());","            sendErrorReply(JSONParser.createMessageWrapper(true, 418,","                    \\"One of the parameters has an invalid value.\\"), api);","        } catch (JsonSyntaxException e) {","            System.out.printf(\\"%s The json received contained incorrect syntax, sending rejection.\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 500,","                    \\"Unknown error occurred.\\", \\"Syntax error when parsing json.\\"), api);","        } catch (NumberFormatException e) {","            System.out.printf(\\"%s The transaction amount was incorrectly specified, sending rejection.\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 418,","                    \\"One of the parameters has an invalid value.\\",","                    \\"The following variable was incorrectly specified: transactionAmount.\\"), api);","        }","    }","","    /**","     * Checks if the input for a transaction request is correctly formatted and contains correct values.","     * @param transaction The transaction request.","     * @throws IncorrectInputException Thrown when a value is not correctly specified.","     * @throws JsonSyntaxException Thrown when the json string is incorrect and cant be parsed.","     * @throws NumberFormatException Thrown when a string value could not be parsed to a Long.","     */","    private static void verifyTransactionInput(final Transaction transaction)","            throws IncorrectInputException, JsonSyntaxException, NumberFormatException {","        final String sourceAccountNumber = transaction.getSourceAccountNumber();","        final String destinationAccountNumber = transaction.getDestinationAccountNumber();","        final String destinationAccountHolderName = transaction.getDestinationAccountHolderName();","        final String transactionDescription = transaction.getDescription();","        final double transactionAmount = transaction.getTransactionAmount();","        if (sourceAccountNumber == null || sourceAccountNumber.length() > MAX_ACCOUNT_NUMBER_LENGTH) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: sourceAccountNumber.\\");","        } else if (destinationAccountNumber == null || destinationAccountNumber.length() > MAX_ACCOUNT_NUMBER_LENGTH) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified:\\"","                    + \\" destinationAccountNumber.\\");","        } else if (destinationAccountHolderName == null || !valueHasCorrectLength(destinationAccountHolderName)) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified:\\"","                    + \\" destinationAccountHolderName.\\");","        } else if (transactionDescription == null || transactionDescription.length() > DESCRIPTION_LIMIT) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified:\\"","                    + \\" transactionDescription.\\");","        } else if (transactionAmount < 0) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: transactionAmount.\\");","        } else if (transaction.isProcessed()) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: isProcessed.\\");","        } else if (transaction.isSuccessful()) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: isSuccessful.\\");","        }","    }","","    /**","     * Forwards transaction request to the Authentication service and forwards the reply or sends a rejection if the","     * request fails.","     * @param transaction Transaction request that should be processed.","     * @param cookie Cookie of the User that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void doTransactionRequest(final Transaction transaction, final String cookie, final ApiBean api) {","        MessageWrapper data = JSONParser.createMessageWrapper(false, 0, \\"Request\\");","        data.setCookie(cookie);","        data.setMethodType(MethodType.TRANSFER_MONEY);","        data.setData(transaction);","","        System.out.printf(\\"%s Forwarding transaction request.\\\\n\\", PREFIX);","        api.getAuthenticationClient().putFormAsyncWith1Param(\\"/services/authentication/transaction\\",","                \\"data\\", api.getJsonConverter().toJson(data),","                (httpStatusCode, httpContentType, transactionReplyJson) -> {","                    if (httpStatusCode == HTTP_OK) {","                        MessageWrapper messageWrapper = api.getJsonConverter().fromJson(","                                JSONParser.removeEscapeCharacters(transactionReplyJson), MessageWrapper.class);","                        if (!messageWrapper.isError()) {","                            sendTransactionCallback((Transaction) messageWrapper.getData(), api);","                        } else {","                            sendErrorReply(messageWrapper, api);","                        }","                    } else {","                        sendErrorReply(JSONParser.createMessageWrapper(true, 500,","                                \\"An unknown error occurred.\\",","                                \\"There was a problem with one of the HTTP requests\\"), api);","                    }","                });","    }","","    /**","     * Forwards the result of a transaction request to the service that sent the request.","     * @param reply The processed transaction","     * @param api DataBean containing everything in the ApiService","     */","    private static void sendTransactionCallback(final Transaction reply, final ApiBean api) {","        if (reply.isSuccessful() && reply.isProcessed()) {","            long transactionId = reply.getTransactionID();","            System.out.printf(\\"%s Internal transaction %d successful.\\\\n\\\\n\\\\n\\\\n\\", PREFIX, transactionId);","            Map<String, Object> result = new HashMap<>();","            JSONRPC2Response response = new JSONRPC2Response(result, api.getId());","            api.getCallbackBuilder().build().reply(response.toJSONString());","        } else {","            System.out.printf(\\"%s Internal transaction was not successful\\\\n\\\\n\\\\n\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 500, \\"Unknown error occurred.\\"), api);","        }","    }","}",""}
26	5	UnblockCard.java	{"package api.methods;","","import api.ApiBean;","import api.IncorrectInputException;","import com.google.gson.JsonSyntaxException;","import com.thetransactioncompany.jsonrpc2.JSONRPC2Response;","import databeans.MessageWrapper;","import databeans.MethodType;","import databeans.PinCard;","import util.JSONParser;","","import java.util.HashMap;","import java.util.Map;","","import static api.ApiService.PREFIX;","import static api.ApiService.MAX_ACCOUNT_NUMBER_LENGTH;","import static api.methods.SharedUtilityMethods.sendErrorReply;","import static java.net.HttpURLConnection.HTTP_OK;","",/**," * @author Saul"," */","public abstract class UnblockCard {","","    /**","     * Unblocks a blocked pin card, requires logging in.","     * @param params Parameters of the request(authToken, iBAN, pinCard).","     * @param api DataBean containing everything in the ApiService","     */","    public static void unblockCard(final Map<String, Object> params, final ApiBean api) {","        String accountNumber = (String) params.get(\\"iBAN\\");","        String pinCard = (String) params.get(\\"pinCard\\");","        String cookie = (String) params.get(\\"authToken\\");","        PinCard request = new PinCard(accountNumber, Long.parseLong(pinCard));","        System.out.printf(\\"%s Sending pinCard unblock request.\\\\n\\", PREFIX);","        handlePinCardUnblockExceptions(request, cookie, api);","    }","","    /**","     * Tries to verify the input of the pinCard unblock and then forward the request, send a rejection if an","     * exception is thrown.","     * @param pinCard {@link PinCard} that should be unblocked.","     * @param cookie Cookie of the User that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void handlePinCardUnblockExceptions(final PinCard pinCard, final String cookie, final ApiBean api) {","        try {","            verifyPinCardInput(pinCard);","            doPinCardUnblockRequest(pinCard, cookie, api);","        } catch (IncorrectInputException e) {","            System.out.printf(\\"%s %s\\", PREFIX, e.getMessage());","            sendErrorReply(JSONParser.createMessageWrapper(true, 418,","                    \\"One of the parameters has an invalid value.\\", e.getMessage()), api);","        } catch (JsonSyntaxException e) {","            System.out.printf(\\"%s The json received contained incorrect syntax, sending rejection.\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 500, \\"Unknown error occurred.\\"), api);","        }","    }","","    /**","     * Checks if the input for an account link request is correctly formatted and contains correct values.","     * @param pinCard {@link PinCard} that should be unblocked.","     * @throws IncorrectInputException Thrown when a value is not correctly specified.","     * @throws JsonSyntaxException Thrown when the json string is incorrect and cant be parsed.","     */","    private static void verifyPinCardInput(final PinCard pinCard)","            throws IncorrectInputException, JsonSyntaxException {","        final String accountNumber = pinCard.getAccountNumber();","        if (accountNumber == null || accountNumber.length() > MAX_ACCOUNT_NUMBER_LENGTH) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: accountNumber.\\");","        }","    }","","    /**","     * Forwards a String representing a pinCard to the Authentication Service, and processes the reply if it is","     * successful or sends a rejection to the requesting source if it fails.","     * @param pinCard {@link PinCard} that should be unblocked.","     * @param cookie Cookie of the User that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void doPinCardUnblockRequest(final PinCard pinCard, final String cookie, final ApiBean api) {","        MessageWrapper data = JSONParser.createMessageWrapper(false, 0, \\"Request\\");","        data.setCookie(cookie);","        data.setMethodType(MethodType.UNBLOCK_CARD);","        data.setData(pinCard);","","        api.getAuthenticationClient().putFormAsyncWith1Param(\\"/services/authentication/unblockCard\\",","                \\"data\\", api.getJsonConverter().toJson(data), ((httpStatusCode, httpContentType, body) -> {","                    if (httpStatusCode == HTTP_OK) {","                        MessageWrapper messageWrapper = api.getJsonConverter().fromJson(","                                JSONParser.removeEscapeCharacters(body), MessageWrapper.class);","                        if (!messageWrapper.isError()) {","                            sendPinCardUnblockRequestCallback((PinCard) messageWrapper.getData(), api);","                        } else {","                            sendErrorReply(messageWrapper, api);","                        }","                    } else {","                        sendErrorReply(JSONParser.createMessageWrapper(true, 500,","                                \\"An unknown error occurred.\\",","                                \\"There was a problem with one of the HTTP requests\\"), api);","                    }","                }));","    }","","    /**","     * Forwards the result of a pinCard unblock request to the service that sent the request.","     * @param pinCard The result of a pinCard unblock request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void sendPinCardUnblockRequestCallback(final PinCard pinCard, final ApiBean api) {","        System.out.printf(\\"%s PinCard unblocked successfully for AccountNumber: %s, CardNumber: %s\\\\n\\\\n\\\\n\\\\n\\",","                PREFIX, pinCard.getAccountNumber(), pinCard.getCardNumber());","        Map<String, Object> result = new HashMap<>();","        JSONRPC2Response response = new JSONRPC2Response(result, api.getId());","        api.getCallbackBuilder().build().reply(response.toJSONString());","    }","}",""}
27	5	TransferMoney.java	{"package api.methods;","","import api.ApiBean;","import api.IncorrectInputException;","import com.google.gson.JsonSyntaxException;","import com.thetransactioncompany.jsonrpc2.JSONRPC2Response;","import databeans.MessageWrapper;","import databeans.MethodType;","import databeans.Transaction;","import util.JSONParser;","","import java.util.HashMap;","import java.util.Map;","","import static api.ApiService.PREFIX;","import static api.ApiService.MAX_ACCOUNT_NUMBER_LENGTH;","import static api.ApiService.DESCRIPTION_LIMIT;","import static api.methods.SharedUtilityMethods.sendErrorReply;","import static api.methods.SharedUtilityMethods.valueHasCorrectLength;","import static java.net.HttpURLConnection.HTTP_OK;","",/**," * @author Saul"," */","public abstract class TransferMoney {","","    /**","     * Transfer money between accounts, the authToken needs to belong to a user that is authorized to make transactions","     * from the sourceAccount.","     * @param params Parameters of the request (authToken, sourceIBAN, targetIBAN, targetName, amount, description).","     * @param api DataBean containing everything in the ApiService","     */","    public static void transferMoney(final Map<String, Object> params, final ApiBean api) {","        String cookie = (String) params.get(\\"authToken\\");","        Transaction transaction = JSONParser.createJsonTransaction(-1, (String) params.get(\\"sourceIBAN\\"),","                (String) params.get(\\"targetIBAN\\"), (String) params.get(\\"targetName\\"),","                (String) params.get(\\"description\\"), (Double) params.get(\\"amount\\"), false, false);","        System.out.printf(\\"%s Sending internal transaction.\\\\n\\", PREFIX);","        handleTransactionExceptions(transaction, cookie, api);","    }","","    /**","     * Tries to verify the input of a transaction request and then forward the request, sends an error if an","     * exception occurs.","     * @param transaction The transaction to test/process","     * @param cookie Cookie of the user that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void handleTransactionExceptions(","            final Transaction transaction, final String cookie, final ApiBean api) {","        try {","            verifyTransactionInput(transaction);","            doTransactionRequest(transaction, cookie, api);","        } catch (IncorrectInputException e) {","            System.out.printf(\\"%s %s, sending rejection.\\\\n\\", PREFIX, e.getMessage());","            sendErrorReply(JSONParser.createMessageWrapper(true, 418,","                    \\"One of the parameters has an invalid value.\\"), api);","        } catch (JsonSyntaxException e) {","            System.out.printf(\\"%s The json received contained incorrect syntax, sending rejection.\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 500,","                    \\"Unknown error occurred.\\", \\"Syntax error when parsing json.\\"), api);","        } catch (NumberFormatException e) {","            System.out.printf(\\"%s The transaction amount was incorrectly specified, sending rejection.\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 418,","                    \\"One of the parameters has an invalid value.\\",","                    \\"The following variable was incorrectly specified: transactionAmount.\\"), api);","        }","    }","","    /**","     * Checks if the input for a transaction request is correctly formatted and contains correct values.","     * @param transaction The transaction request.","     * @throws IncorrectInputException Thrown when a value is not correctly specified.","     * @throws JsonSyntaxException Thrown when the json string is incorrect and cant be parsed.","     * @throws NumberFormatException Thrown when a string value could not be parsed to a Long.","     */","    private static void verifyTransactionInput(final Transaction transaction)","            throws IncorrectInputException, JsonSyntaxException, NumberFormatException {","        final String sourceAccountNumber = transaction.getSourceAccountNumber();","        final String destinationAccountNumber = transaction.getDestinationAccountNumber();","        final String destinationAccountHolderName = transaction.getDestinationAccountHolderName();","        final String transactionDescription = transaction.getDescription();","        final double transactionAmount = transaction.getTransactionAmount();","        if (sourceAccountNumber == null || sourceAccountNumber.length() > MAX_ACCOUNT_NUMBER_LENGTH) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: sourceAccountNumber.\\");","        } else if (destinationAccountNumber == null || destinationAccountNumber.length() > MAX_ACCOUNT_NUMBER_LENGTH) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified:\\"","                    + \\" destinationAccountNumber.\\");","        } else if (destinationAccountHolderName == null || !valueHasCorrectLength(destinationAccountHolderName)) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified:\\"","                    + \\" destinationAccountHolderName.\\");","        } else if (transactionDescription == null || transactionDescription.length() > DESCRIPTION_LIMIT) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified:\\"","                    + \\" transactionDescription.\\");","        } else if (transactionAmount < 0) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: transactionAmount.\\");","        } else if (transaction.isProcessed()) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: isProcessed.\\");","        } else if (transaction.isSuccessful()) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: isSuccessful.\\");","        }","    }","","    /**","     * Forwards transaction request to the Authentication service and forwards the reply or sends a rejection if the","     * request fails.","     * @param transaction Transaction request that should be processed.","     * @param cookie Cookie of the User that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void doTransactionRequest(final Transaction transaction, final String cookie, final ApiBean api) {","        MessageWrapper data = JSONParser.createMessageWrapper(false, 0, \\"Request\\");","        data.setCookie(cookie);","        data.setMethodType(MethodType.TRANSFER_MONEY);","        data.setData(transaction);","","        System.out.printf(\\"%s Forwarding transaction request.\\\\n\\", PREFIX);","        api.getAuthenticationClient().putFormAsyncWith1Param(\\"/services/authentication/transaction\\",","                \\"data\\", api.getJsonConverter().toJson(data),","                (httpStatusCode, httpContentType, transactionReplyJson) -> {","                    if (httpStatusCode == HTTP_OK) {","                        MessageWrapper messageWrapper = api.getJsonConverter().fromJson(","                                JSONParser.removeEscapeCharacters(transactionReplyJson), MessageWrapper.class);","                        if (!messageWrapper.isError()) {","                            sendTransactionCallback((Transaction) messageWrapper.getData(), api);","                        } else {","                            sendErrorReply(messageWrapper, api);","                        }","                    } else {","                        sendErrorReply(JSONParser.createMessageWrapper(true, 500,","                                \\"An unknown error occurred.\\",","                                \\"There was a problem with one of the HTTP requests\\"), api);","                    }","                });","    }","","    /**","     * Forwards the result of a transaction request to the service that sent the request.","     * @param reply The processed transaction","     * @param api DataBean containing everything in the ApiService","     */","    private static void sendTransactionCallback(final Transaction reply, final ApiBean api) {","        if (reply.isSuccessful() && reply.isProcessed()) {","            long transactionId = reply.getTransactionID();","            System.out.printf(\\"%s Internal transaction %d successful.\\\\n\\\\n\\\\n\\\\n\\", PREFIX, transactionId);","            Map<String, Object> result = new HashMap<>();","            JSONRPC2Response response = new JSONRPC2Response(result, api.getId());","            api.getCallbackBuilder().build().reply(response.toJSONString());","        } else {","            System.out.printf(\\"%s Internal transaction was not successful\\\\n\\\\n\\\\n\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 500, \\"Unknown error occurred.\\"), api);","        }","    }","}",""}
28	5	UnblockCard.java	{"package api.methods;","","import api.ApiBean;","import api.IncorrectInputException;","import com.google.gson.JsonSyntaxException;","import com.thetransactioncompany.jsonrpc2.JSONRPC2Response;","import databeans.MessageWrapper;","import databeans.MethodType;","import databeans.PinCard;","import util.JSONParser;","","import java.util.HashMap;","import java.util.Map;","","import static api.ApiService.PREFIX;","import static api.ApiService.MAX_ACCOUNT_NUMBER_LENGTH;","import static api.methods.SharedUtilityMethods.sendErrorReply;","import static java.net.HttpURLConnection.HTTP_OK;","",/**," * @author Saul"," */","public abstract class UnblockCard {","","    /**","     * Unblocks a blocked pin card, requires logging in.","     * @param params Parameters of the request(authToken, iBAN, pinCard).","     * @param api DataBean containing everything in the ApiService","     */","    public static void unblockCard(final Map<String, Object> params, final ApiBean api) {","        String accountNumber = (String) params.get(\\"iBAN\\");","        String pinCard = (String) params.get(\\"pinCard\\");","        String cookie = (String) params.get(\\"authToken\\");","        PinCard request = new PinCard(accountNumber, Long.parseLong(pinCard));","        System.out.printf(\\"%s Sending pinCard unblock request.\\\\n\\", PREFIX);","        handlePinCardUnblockExceptions(request, cookie, api);","    }","","    /**","     * Tries to verify the input of the pinCard unblock and then forward the request, send a rejection if an","     * exception is thrown.","     * @param pinCard {@link PinCard} that should be unblocked.","     * @param cookie Cookie of the User that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void handlePinCardUnblockExceptions(final PinCard pinCard, final String cookie, final ApiBean api) {","        try {","            verifyPinCardInput(pinCard);","            doPinCardUnblockRequest(pinCard, cookie, api);","        } catch (IncorrectInputException e) {","            System.out.printf(\\"%s %s\\", PREFIX, e.getMessage());","            sendErrorReply(JSONParser.createMessageWrapper(true, 418,","                    \\"One of the parameters has an invalid value.\\", e.getMessage()), api);","        } catch (JsonSyntaxException e) {","            System.out.printf(\\"%s The json received contained incorrect syntax, sending rejection.\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 500, \\"Unknown error occurred.\\"), api);","        }","    }","","    /**","     * Checks if the input for an account link request is correctly formatted and contains correct values.","     * @param pinCard {@link PinCard} that should be unblocked.","     * @throws IncorrectInputException Thrown when a value is not correctly specified.","     * @throws JsonSyntaxException Thrown when the json string is incorrect and cant be parsed.","     */","    private static void verifyPinCardInput(final PinCard pinCard)","            throws IncorrectInputException, JsonSyntaxException {","        final String accountNumber = pinCard.getAccountNumber();","        if (accountNumber == null || accountNumber.length() > MAX_ACCOUNT_NUMBER_LENGTH) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: accountNumber.\\");","        }","    }","","    /**","     * Forwards a String representing a pinCard to the Authentication Service, and processes the reply if it is","     * successful or sends a rejection to the requesting source if it fails.","     * @param pinCard {@link PinCard} that should be unblocked.","     * @param cookie Cookie of the User that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void doPinCardUnblockRequest(final PinCard pinCard, final String cookie, final ApiBean api) {","        MessageWrapper data = JSONParser.createMessageWrapper(false, 0, \\"Request\\");","        data.setCookie(cookie);","        data.setMethodType(MethodType.UNBLOCK_CARD);","        data.setData(pinCard);","","        api.getAuthenticationClient().putFormAsyncWith1Param(\\"/services/authentication/unblockCard\\",","                \\"data\\", api.getJsonConverter().toJson(data), ((httpStatusCode, httpContentType, body) -> {","                    if (httpStatusCode == HTTP_OK) {","                        MessageWrapper messageWrapper = api.getJsonConverter().fromJson(","                                JSONParser.removeEscapeCharacters(body), MessageWrapper.class);","                        if (!messageWrapper.isError()) {","                            sendPinCardUnblockRequestCallback((PinCard) messageWrapper.getData(), api);","                        } else {","                            sendErrorReply(messageWrapper, api);","                        }","                    } else {","                        sendErrorReply(JSONParser.createMessageWrapper(true, 500,","                                \\"An unknown error occurred.\\",","                                \\"There was a problem with one of the HTTP requests\\"), api);","                    }","                }));","    }","","    /**","     * Forwards the result of a pinCard unblock request to the service that sent the request.","     * @param pinCard The result of a pinCard unblock request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void sendPinCardUnblockRequestCallback(final PinCard pinCard, final ApiBean api) {","        System.out.printf(\\"%s PinCard unblocked successfully for AccountNumber: %s, CardNumber: %s\\\\n\\\\n\\\\n\\\\n\\",","                PREFIX, pinCard.getAccountNumber(), pinCard.getCardNumber());","        Map<String, Object> result = new HashMap<>();","        JSONRPC2Response response = new JSONRPC2Response(result, api.getId());","        api.getCallbackBuilder().build().reply(response.toJSONString());","    }","}",""}
29	5	TransferMoney.java	{"package api.methods;","","import api.ApiBean;","import api.IncorrectInputException;","import com.google.gson.JsonSyntaxException;","import com.thetransactioncompany.jsonrpc2.JSONRPC2Response;","import databeans.MessageWrapper;","import databeans.MethodType;","import databeans.Transaction;","import util.JSONParser;","","import java.util.HashMap;","import java.util.Map;","","import static api.ApiService.PREFIX;","import static api.ApiService.MAX_ACCOUNT_NUMBER_LENGTH;","import static api.ApiService.DESCRIPTION_LIMIT;","import static api.methods.SharedUtilityMethods.sendErrorReply;","import static api.methods.SharedUtilityMethods.valueHasCorrectLength;","import static java.net.HttpURLConnection.HTTP_OK;","",/**," * @author Saul"," */","public abstract class TransferMoney {","","    /**","     * Transfer money between accounts, the authToken needs to belong to a user that is authorized to make transactions","     * from the sourceAccount.","     * @param params Parameters of the request (authToken, sourceIBAN, targetIBAN, targetName, amount, description).","     * @param api DataBean containing everything in the ApiService","     */","    public static void transferMoney(final Map<String, Object> params, final ApiBean api) {","        String cookie = (String) params.get(\\"authToken\\");","        Transaction transaction = JSONParser.createJsonTransaction(-1, (String) params.get(\\"sourceIBAN\\"),","                (String) params.get(\\"targetIBAN\\"), (String) params.get(\\"targetName\\"),","                (String) params.get(\\"description\\"), (Double) params.get(\\"amount\\"), false, false);","        System.out.printf(\\"%s Sending internal transaction.\\\\n\\", PREFIX);","        handleTransactionExceptions(transaction, cookie, api);","    }","","    /**","     * Tries to verify the input of a transaction request and then forward the request, sends an error if an","     * exception occurs.","     * @param transaction The transaction to test/process","     * @param cookie Cookie of the user that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void handleTransactionExceptions(","            final Transaction transaction, final String cookie, final ApiBean api) {","        try {","            verifyTransactionInput(transaction);","            doTransactionRequest(transaction, cookie, api);","        } catch (IncorrectInputException e) {","            System.out.printf(\\"%s %s, sending rejection.\\\\n\\", PREFIX, e.getMessage());","            sendErrorReply(JSONParser.createMessageWrapper(true, 418,","                    \\"One of the parameters has an invalid value.\\"), api);","        } catch (JsonSyntaxException e) {","            System.out.printf(\\"%s The json received contained incorrect syntax, sending rejection.\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 500,","                    \\"Unknown error occurred.\\", \\"Syntax error when parsing json.\\"), api);","        } catch (NumberFormatException e) {","            System.out.printf(\\"%s The transaction amount was incorrectly specified, sending rejection.\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 418,","                    \\"One of the parameters has an invalid value.\\",","                    \\"The following variable was incorrectly specified: transactionAmount.\\"), api);","        }","    }","","    /**","     * Checks if the input for a transaction request is correctly formatted and contains correct values.","     * @param transaction The transaction request.","     * @throws IncorrectInputException Thrown when a value is not correctly specified.","     * @throws JsonSyntaxException Thrown when the json string is incorrect and cant be parsed.","     * @throws NumberFormatException Thrown when a string value could not be parsed to a Long.","     */","    private static void verifyTransactionInput(final Transaction transaction)","            throws IncorrectInputException, JsonSyntaxException, NumberFormatException {","        final String sourceAccountNumber = transaction.getSourceAccountNumber();","        final String destinationAccountNumber = transaction.getDestinationAccountNumber();","        final String destinationAccountHolderName = transaction.getDestinationAccountHolderName();","        final String transactionDescription = transaction.getDescription();","        final double transactionAmount = transaction.getTransactionAmount();","        if (sourceAccountNumber == null || sourceAccountNumber.length() > MAX_ACCOUNT_NUMBER_LENGTH) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: sourceAccountNumber.\\");","        } else if (destinationAccountNumber == null || destinationAccountNumber.length() > MAX_ACCOUNT_NUMBER_LENGTH) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified:\\"","                    + \\" destinationAccountNumber.\\");","        } else if (destinationAccountHolderName == null || !valueHasCorrectLength(destinationAccountHolderName)) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified:\\"","                    + \\" destinationAccountHolderName.\\");","        } else if (transactionDescription == null || transactionDescription.length() > DESCRIPTION_LIMIT) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified:\\"","                    + \\" transactionDescription.\\");","        } else if (transactionAmount < 0) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: transactionAmount.\\");","        } else if (transaction.isProcessed()) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: isProcessed.\\");","        } else if (transaction.isSuccessful()) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: isSuccessful.\\");","        }","    }","","    /**","     * Forwards transaction request to the Authentication service and forwards the reply or sends a rejection if the","     * request fails.","     * @param transaction Transaction request that should be processed.","     * @param cookie Cookie of the User that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void doTransactionRequest(final Transaction transaction, final String cookie, final ApiBean api) {","        MessageWrapper data = JSONParser.createMessageWrapper(false, 0, \\"Request\\");","        data.setCookie(cookie);","        data.setMethodType(MethodType.TRANSFER_MONEY);","        data.setData(transaction);","","        System.out.printf(\\"%s Forwarding transaction request.\\\\n\\", PREFIX);","        api.getAuthenticationClient().putFormAsyncWith1Param(\\"/services/authentication/transaction\\",","                \\"data\\", api.getJsonConverter().toJson(data),","                (httpStatusCode, httpContentType, transactionReplyJson) -> {","                    if (httpStatusCode == HTTP_OK) {","                        MessageWrapper messageWrapper = api.getJsonConverter().fromJson(","                                JSONParser.removeEscapeCharacters(transactionReplyJson), MessageWrapper.class);","                        if (!messageWrapper.isError()) {","                            sendTransactionCallback((Transaction) messageWrapper.getData(), api);","                        } else {","                            sendErrorReply(messageWrapper, api);","                        }","                    } else {","                        sendErrorReply(JSONParser.createMessageWrapper(true, 500,","                                \\"An unknown error occurred.\\",","                                \\"There was a problem with one of the HTTP requests\\"), api);","                    }","                });","    }","","    /**","     * Forwards the result of a transaction request to the service that sent the request.","     * @param reply The processed transaction","     * @param api DataBean containing everything in the ApiService","     */","    private static void sendTransactionCallback(final Transaction reply, final ApiBean api) {","        if (reply.isSuccessful() && reply.isProcessed()) {","            long transactionId = reply.getTransactionID();","            System.out.printf(\\"%s Internal transaction %d successful.\\\\n\\\\n\\\\n\\\\n\\", PREFIX, transactionId);","            Map<String, Object> result = new HashMap<>();","            JSONRPC2Response response = new JSONRPC2Response(result, api.getId());","            api.getCallbackBuilder().build().reply(response.toJSONString());","        } else {","            System.out.printf(\\"%s Internal transaction was not successful\\\\n\\\\n\\\\n\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 500, \\"Unknown error occurred.\\"), api);","        }","    }","}",""}
30	5	TransferMoney.java	{"package api.methods;","","import api.ApiBean;","import api.IncorrectInputException;","import com.google.gson.JsonSyntaxException;","import com.thetransactioncompany.jsonrpc2.JSONRPC2Response;","import databeans.MessageWrapper;","import databeans.MethodType;","import databeans.Transaction;","import util.JSONParser;","","import java.util.HashMap;","import java.util.Map;","","import static api.ApiService.PREFIX;","import static api.ApiService.MAX_ACCOUNT_NUMBER_LENGTH;","import static api.ApiService.DESCRIPTION_LIMIT;","import static api.methods.SharedUtilityMethods.sendErrorReply;","import static api.methods.SharedUtilityMethods.valueHasCorrectLength;","import static java.net.HttpURLConnection.HTTP_OK;","",/**," * @author Saul"," */","public abstract class TransferMoney {","","    /**","     * Transfer money between accounts, the authToken needs to belong to a user that is authorized to make transactions","     * from the sourceAccount.","     * @param params Parameters of the request (authToken, sourceIBAN, targetIBAN, targetName, amount, description).","     * @param api DataBean containing everything in the ApiService","     */","    public static void transferMoney(final Map<String, Object> params, final ApiBean api) {","        String cookie = (String) params.get(\\"authToken\\");","        Transaction transaction = JSONParser.createJsonTransaction(-1, (String) params.get(\\"sourceIBAN\\"),","                (String) params.get(\\"targetIBAN\\"), (String) params.get(\\"targetName\\"),","                (String) params.get(\\"description\\"), (Double) params.get(\\"amount\\"), false, false);","        System.out.printf(\\"%s Sending internal transaction.\\\\n\\", PREFIX);","        handleTransactionExceptions(transaction, cookie, api);","    }","","    /**","     * Tries to verify the input of a transaction request and then forward the request, sends an error if an","     * exception occurs.","     * @param transaction The transaction to test/process","     * @param cookie Cookie of the user that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void handleTransactionExceptions(","            final Transaction transaction, final String cookie, final ApiBean api) {","        try {","            verifyTransactionInput(transaction);","            doTransactionRequest(transaction, cookie, api);","        } catch (IncorrectInputException e) {","            System.out.printf(\\"%s %s, sending rejection.\\\\n\\", PREFIX, e.getMessage());","            sendErrorReply(JSONParser.createMessageWrapper(true, 418,","                    \\"One of the parameters has an invalid value.\\"), api);","        } catch (JsonSyntaxException e) {","            System.out.printf(\\"%s The json received contained incorrect syntax, sending rejection.\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 500,","                    \\"Unknown error occurred.\\", \\"Syntax error when parsing json.\\"), api);","        } catch (NumberFormatException e) {","            System.out.printf(\\"%s The transaction amount was incorrectly specified, sending rejection.\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 418,","                    \\"One of the parameters has an invalid value.\\",","                    \\"The following variable was incorrectly specified: transactionAmount.\\"), api);","        }","    }","","    /**","     * Checks if the input for a transaction request is correctly formatted and contains correct values.","     * @param transaction The transaction request.","     * @throws IncorrectInputException Thrown when a value is not correctly specified.","     * @throws JsonSyntaxException Thrown when the json string is incorrect and cant be parsed.","     * @throws NumberFormatException Thrown when a string value could not be parsed to a Long.","     */","    private static void verifyTransactionInput(final Transaction transaction)","            throws IncorrectInputException, JsonSyntaxException, NumberFormatException {","        final String sourceAccountNumber = transaction.getSourceAccountNumber();","        final String destinationAccountNumber = transaction.getDestinationAccountNumber();","        final String destinationAccountHolderName = transaction.getDestinationAccountHolderName();","        final String transactionDescription = transaction.getDescription();","        final double transactionAmount = transaction.getTransactionAmount();","        if (sourceAccountNumber == null || sourceAccountNumber.length() > MAX_ACCOUNT_NUMBER_LENGTH) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: sourceAccountNumber.\\");","        } else if (destinationAccountNumber == null || destinationAccountNumber.length() > MAX_ACCOUNT_NUMBER_LENGTH) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified:\\"","                    + \\" destinationAccountNumber.\\");","        } else if (destinationAccountHolderName == null || !valueHasCorrectLength(destinationAccountHolderName)) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified:\\"","                    + \\" destinationAccountHolderName.\\");","        } else if (transactionDescription == null || transactionDescription.length() > DESCRIPTION_LIMIT) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified:\\"","                    + \\" transactionDescription.\\");","        } else if (transactionAmount < 0) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: transactionAmount.\\");","        } else if (transaction.isProcessed()) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: isProcessed.\\");","        } else if (transaction.isSuccessful()) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: isSuccessful.\\");","        }","    }","","    /**","     * Forwards transaction request to the Authentication service and forwards the reply or sends a rejection if the","     * request fails.","     * @param transaction Transaction request that should be processed.","     * @param cookie Cookie of the User that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void doTransactionRequest(final Transaction transaction, final String cookie, final ApiBean api) {","        MessageWrapper data = JSONParser.createMessageWrapper(false, 0, \\"Request\\");","        data.setCookie(cookie);","        data.setMethodType(MethodType.TRANSFER_MONEY);","        data.setData(transaction);","","        System.out.printf(\\"%s Forwarding transaction request.\\\\n\\", PREFIX);","        api.getAuthenticationClient().putFormAsyncWith1Param(\\"/services/authentication/transaction\\",","                \\"data\\", api.getJsonConverter().toJson(data),","                (httpStatusCode, httpContentType, transactionReplyJson) -> {","                    if (httpStatusCode == HTTP_OK) {","                        MessageWrapper messageWrapper = api.getJsonConverter().fromJson(","                                JSONParser.removeEscapeCharacters(transactionReplyJson), MessageWrapper.class);","                        if (!messageWrapper.isError()) {","                            sendTransactionCallback((Transaction) messageWrapper.getData(), api);","                        } else {","                            sendErrorReply(messageWrapper, api);","                        }","                    } else {","                        sendErrorReply(JSONParser.createMessageWrapper(true, 500,","                                \\"An unknown error occurred.\\",","                                \\"There was a problem with one of the HTTP requests\\"), api);","                    }","                });","    }","","    /**","     * Forwards the result of a transaction request to the service that sent the request.","     * @param reply The processed transaction","     * @param api DataBean containing everything in the ApiService","     */","    private static void sendTransactionCallback(final Transaction reply, final ApiBean api) {","        if (reply.isSuccessful() && reply.isProcessed()) {","            long transactionId = reply.getTransactionID();","            System.out.printf(\\"%s Internal transaction %d successful.\\\\n\\\\n\\\\n\\\\n\\", PREFIX, transactionId);","            Map<String, Object> result = new HashMap<>();","            JSONRPC2Response response = new JSONRPC2Response(result, api.getId());","            api.getCallbackBuilder().build().reply(response.toJSONString());","        } else {","            System.out.printf(\\"%s Internal transaction was not successful\\\\n\\\\n\\\\n\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 500, \\"Unknown error occurred.\\"), api);","        }","    }","}",""}
31	5	UnblockCard.java	{"package api.methods;","","import api.ApiBean;","import api.IncorrectInputException;","import com.google.gson.JsonSyntaxException;","import com.thetransactioncompany.jsonrpc2.JSONRPC2Response;","import databeans.MessageWrapper;","import databeans.MethodType;","import databeans.PinCard;","import util.JSONParser;","","import java.util.HashMap;","import java.util.Map;","","import static api.ApiService.PREFIX;","import static api.ApiService.MAX_ACCOUNT_NUMBER_LENGTH;","import static api.methods.SharedUtilityMethods.sendErrorReply;","import static java.net.HttpURLConnection.HTTP_OK;","",/**," * @author Saul"," */","public abstract class UnblockCard {","","    /**","     * Unblocks a blocked pin card, requires logging in.","     * @param params Parameters of the request(authToken, iBAN, pinCard).","     * @param api DataBean containing everything in the ApiService","     */","    public static void unblockCard(final Map<String, Object> params, final ApiBean api) {","        String accountNumber = (String) params.get(\\"iBAN\\");","        String pinCard = (String) params.get(\\"pinCard\\");","        String cookie = (String) params.get(\\"authToken\\");","        PinCard request = new PinCard(accountNumber, Long.parseLong(pinCard));","        System.out.printf(\\"%s Sending pinCard unblock request.\\\\n\\", PREFIX);","        handlePinCardUnblockExceptions(request, cookie, api);","    }","","    /**","     * Tries to verify the input of the pinCard unblock and then forward the request, send a rejection if an","     * exception is thrown.","     * @param pinCard {@link PinCard} that should be unblocked.","     * @param cookie Cookie of the User that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void handlePinCardUnblockExceptions(final PinCard pinCard, final String cookie, final ApiBean api) {","        try {","            verifyPinCardInput(pinCard);","            doPinCardUnblockRequest(pinCard, cookie, api);","        } catch (IncorrectInputException e) {","            System.out.printf(\\"%s %s\\", PREFIX, e.getMessage());","            sendErrorReply(JSONParser.createMessageWrapper(true, 418,","                    \\"One of the parameters has an invalid value.\\", e.getMessage()), api);","        } catch (JsonSyntaxException e) {","            System.out.printf(\\"%s The json received contained incorrect syntax, sending rejection.\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 500, \\"Unknown error occurred.\\"), api);","        }","    }","","    /**","     * Checks if the input for an account link request is correctly formatted and contains correct values.","     * @param pinCard {@link PinCard} that should be unblocked.","     * @throws IncorrectInputException Thrown when a value is not correctly specified.","     * @throws JsonSyntaxException Thrown when the json string is incorrect and cant be parsed.","     */","    private static void verifyPinCardInput(final PinCard pinCard)","            throws IncorrectInputException, JsonSyntaxException {","        final String accountNumber = pinCard.getAccountNumber();","        if (accountNumber == null || accountNumber.length() > MAX_ACCOUNT_NUMBER_LENGTH) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: accountNumber.\\");","        }","    }","","    /**","     * Forwards a String representing a pinCard to the Authentication Service, and processes the reply if it is","     * successful or sends a rejection to the requesting source if it fails.","     * @param pinCard {@link PinCard} that should be unblocked.","     * @param cookie Cookie of the User that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void doPinCardUnblockRequest(final PinCard pinCard, final String cookie, final ApiBean api) {","        MessageWrapper data = JSONParser.createMessageWrapper(false, 0, \\"Request\\");","        data.setCookie(cookie);","        data.setMethodType(MethodType.UNBLOCK_CARD);","        data.setData(pinCard);","","        api.getAuthenticationClient().putFormAsyncWith1Param(\\"/services/authentication/unblockCard\\",","                \\"data\\", api.getJsonConverter().toJson(data), ((httpStatusCode, httpContentType, body) -> {","                    if (httpStatusCode == HTTP_OK) {","                        MessageWrapper messageWrapper = api.getJsonConverter().fromJson(","                                JSONParser.removeEscapeCharacters(body), MessageWrapper.class);","                        if (!messageWrapper.isError()) {","                            sendPinCardUnblockRequestCallback((PinCard) messageWrapper.getData(), api);","                        } else {","                            sendErrorReply(messageWrapper, api);","                        }","                    } else {","                        sendErrorReply(JSONParser.createMessageWrapper(true, 500,","                                \\"An unknown error occurred.\\",","                                \\"There was a problem with one of the HTTP requests\\"), api);","                    }","                }));","    }","","    /**","     * Forwards the result of a pinCard unblock request to the service that sent the request.","     * @param pinCard The result of a pinCard unblock request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void sendPinCardUnblockRequestCallback(final PinCard pinCard, final ApiBean api) {","        System.out.printf(\\"%s PinCard unblocked successfully for AccountNumber: %s, CardNumber: %s\\\\n\\\\n\\\\n\\\\n\\",","                PREFIX, pinCard.getAccountNumber(), pinCard.getCardNumber());","        Map<String, Object> result = new HashMap<>();","        JSONRPC2Response response = new JSONRPC2Response(result, api.getId());","        api.getCallbackBuilder().build().reply(response.toJSONString());","    }","}",""}
32	5	UnblockCard.java	{"package api.methods;","","import api.ApiBean;","import api.IncorrectInputException;","import com.google.gson.JsonSyntaxException;","import com.thetransactioncompany.jsonrpc2.JSONRPC2Response;","import databeans.MessageWrapper;","import databeans.MethodType;","import databeans.PinCard;","import util.JSONParser;","","import java.util.HashMap;","import java.util.Map;","","import static api.ApiService.PREFIX;","import static api.ApiService.MAX_ACCOUNT_NUMBER_LENGTH;","import static api.methods.SharedUtilityMethods.sendErrorReply;","import static java.net.HttpURLConnection.HTTP_OK;","",/**," * @author Saul"," */","public abstract class UnblockCard {","","    /**","     * Unblocks a blocked pin card, requires logging in.","     * @param params Parameters of the request(authToken, iBAN, pinCard).","     * @param api DataBean containing everything in the ApiService","     */","    public static void unblockCard(final Map<String, Object> params, final ApiBean api) {","        String accountNumber = (String) params.get(\\"iBAN\\");","        String pinCard = (String) params.get(\\"pinCard\\");","        String cookie = (String) params.get(\\"authToken\\");","        PinCard request = new PinCard(accountNumber, Long.parseLong(pinCard));","        System.out.printf(\\"%s Sending pinCard unblock request.\\\\n\\", PREFIX);","        handlePinCardUnblockExceptions(request, cookie, api);","    }","","    /**","     * Tries to verify the input of the pinCard unblock and then forward the request, send a rejection if an","     * exception is thrown.","     * @param pinCard {@link PinCard} that should be unblocked.","     * @param cookie Cookie of the User that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void handlePinCardUnblockExceptions(final PinCard pinCard, final String cookie, final ApiBean api) {","        try {","            verifyPinCardInput(pinCard);","            doPinCardUnblockRequest(pinCard, cookie, api);","        } catch (IncorrectInputException e) {","            System.out.printf(\\"%s %s\\", PREFIX, e.getMessage());","            sendErrorReply(JSONParser.createMessageWrapper(true, 418,","                    \\"One of the parameters has an invalid value.\\", e.getMessage()), api);","        } catch (JsonSyntaxException e) {","            System.out.printf(\\"%s The json received contained incorrect syntax, sending rejection.\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 500, \\"Unknown error occurred.\\"), api);","        }","    }","","    /**","     * Checks if the input for an account link request is correctly formatted and contains correct values.","     * @param pinCard {@link PinCard} that should be unblocked.","     * @throws IncorrectInputException Thrown when a value is not correctly specified.","     * @throws JsonSyntaxException Thrown when the json string is incorrect and cant be parsed.","     */","    private static void verifyPinCardInput(final PinCard pinCard)","            throws IncorrectInputException, JsonSyntaxException {","        final String accountNumber = pinCard.getAccountNumber();","        if (accountNumber == null || accountNumber.length() > MAX_ACCOUNT_NUMBER_LENGTH) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: accountNumber.\\");","        }","    }","","    /**","     * Forwards a String representing a pinCard to the Authentication Service, and processes the reply if it is","     * successful or sends a rejection to the requesting source if it fails.","     * @param pinCard {@link PinCard} that should be unblocked.","     * @param cookie Cookie of the User that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void doPinCardUnblockRequest(final PinCard pinCard, final String cookie, final ApiBean api) {","        MessageWrapper data = JSONParser.createMessageWrapper(false, 0, \\"Request\\");","        data.setCookie(cookie);","        data.setMethodType(MethodType.UNBLOCK_CARD);","        data.setData(pinCard);","","        api.getAuthenticationClient().putFormAsyncWith1Param(\\"/services/authentication/unblockCard\\",","                \\"data\\", api.getJsonConverter().toJson(data), ((httpStatusCode, httpContentType, body) -> {","                    if (httpStatusCode == HTTP_OK) {","                        MessageWrapper messageWrapper = api.getJsonConverter().fromJson(","                                JSONParser.removeEscapeCharacters(body), MessageWrapper.class);","                        if (!messageWrapper.isError()) {","                            sendPinCardUnblockRequestCallback((PinCard) messageWrapper.getData(), api);","                        } else {","                            sendErrorReply(messageWrapper, api);","                        }","                    } else {","                        sendErrorReply(JSONParser.createMessageWrapper(true, 500,","                                \\"An unknown error occurred.\\",","                                \\"There was a problem with one of the HTTP requests\\"), api);","                    }","                }));","    }","","    /**","     * Forwards the result of a pinCard unblock request to the service that sent the request.","     * @param pinCard The result of a pinCard unblock request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void sendPinCardUnblockRequestCallback(final PinCard pinCard, final ApiBean api) {","        System.out.printf(\\"%s PinCard unblocked successfully for AccountNumber: %s, CardNumber: %s\\\\n\\\\n\\\\n\\\\n\\",","                PREFIX, pinCard.getAccountNumber(), pinCard.getCardNumber());","        Map<String, Object> result = new HashMap<>();","        JSONRPC2Response response = new JSONRPC2Response(result, api.getId());","        api.getCallbackBuilder().build().reply(response.toJSONString());","    }","}",""}
33	5	TransferMoney.java	{"package api.methods;","","import api.ApiBean;","import api.IncorrectInputException;","import com.google.gson.JsonSyntaxException;","import com.thetransactioncompany.jsonrpc2.JSONRPC2Response;","import databeans.MessageWrapper;","import databeans.MethodType;","import databeans.Transaction;","import util.JSONParser;","","import java.util.HashMap;","import java.util.Map;","","import static api.ApiService.PREFIX;","import static api.ApiService.MAX_ACCOUNT_NUMBER_LENGTH;","import static api.ApiService.DESCRIPTION_LIMIT;","import static api.methods.SharedUtilityMethods.sendErrorReply;","import static api.methods.SharedUtilityMethods.valueHasCorrectLength;","import static java.net.HttpURLConnection.HTTP_OK;","",/**," * @author Saul"," */","public abstract class TransferMoney {","","    /**","     * Transfer money between accounts, the authToken needs to belong to a user that is authorized to make transactions","     * from the sourceAccount.","     * @param params Parameters of the request (authToken, sourceIBAN, targetIBAN, targetName, amount, description).","     * @param api DataBean containing everything in the ApiService","     */","    public static void transferMoney(final Map<String, Object> params, final ApiBean api) {","        String cookie = (String) params.get(\\"authToken\\");","        Transaction transaction = JSONParser.createJsonTransaction(-1, (String) params.get(\\"sourceIBAN\\"),","                (String) params.get(\\"targetIBAN\\"), (String) params.get(\\"targetName\\"),","                (String) params.get(\\"description\\"), (Double) params.get(\\"amount\\"), false, false);","        System.out.printf(\\"%s Sending internal transaction.\\\\n\\", PREFIX);","        handleTransactionExceptions(transaction, cookie, api);","    }","","    /**","     * Tries to verify the input of a transaction request and then forward the request, sends an error if an","     * exception occurs.","     * @param transaction The transaction to test/process","     * @param cookie Cookie of the user that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void handleTransactionExceptions(","            final Transaction transaction, final String cookie, final ApiBean api) {","        try {","            verifyTransactionInput(transaction);","            doTransactionRequest(transaction, cookie, api);","        } catch (IncorrectInputException e) {","            System.out.printf(\\"%s %s, sending rejection.\\\\n\\", PREFIX, e.getMessage());","            sendErrorReply(JSONParser.createMessageWrapper(true, 418,","                    \\"One of the parameters has an invalid value.\\"), api);","        } catch (JsonSyntaxException e) {","            System.out.printf(\\"%s The json received contained incorrect syntax, sending rejection.\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 500,","                    \\"Unknown error occurred.\\", \\"Syntax error when parsing json.\\"), api);","        } catch (NumberFormatException e) {","            System.out.printf(\\"%s The transaction amount was incorrectly specified, sending rejection.\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 418,","                    \\"One of the parameters has an invalid value.\\",","                    \\"The following variable was incorrectly specified: transactionAmount.\\"), api);","        }","    }","","    /**","     * Checks if the input for a transaction request is correctly formatted and contains correct values.","     * @param transaction The transaction request.","     * @throws IncorrectInputException Thrown when a value is not correctly specified.","     * @throws JsonSyntaxException Thrown when the json string is incorrect and cant be parsed.","     * @throws NumberFormatException Thrown when a string value could not be parsed to a Long.","     */","    private static void verifyTransactionInput(final Transaction transaction)","            throws IncorrectInputException, JsonSyntaxException, NumberFormatException {","        final String sourceAccountNumber = transaction.getSourceAccountNumber();","        final String destinationAccountNumber = transaction.getDestinationAccountNumber();","        final String destinationAccountHolderName = transaction.getDestinationAccountHolderName();","        final String transactionDescription = transaction.getDescription();","        final double transactionAmount = transaction.getTransactionAmount();","        if (sourceAccountNumber == null || sourceAccountNumber.length() > MAX_ACCOUNT_NUMBER_LENGTH) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: sourceAccountNumber.\\");","        } else if (destinationAccountNumber == null || destinationAccountNumber.length() > MAX_ACCOUNT_NUMBER_LENGTH) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified:\\"","                    + \\" destinationAccountNumber.\\");","        } else if (destinationAccountHolderName == null || !valueHasCorrectLength(destinationAccountHolderName)) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified:\\"","                    + \\" destinationAccountHolderName.\\");","        } else if (transactionDescription == null || transactionDescription.length() > DESCRIPTION_LIMIT) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified:\\"","                    + \\" transactionDescription.\\");","        } else if (transactionAmount < 0) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: transactionAmount.\\");","        } else if (transaction.isProcessed()) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: isProcessed.\\");","        } else if (transaction.isSuccessful()) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: isSuccessful.\\");","        }","    }","","    /**","     * Forwards transaction request to the Authentication service and forwards the reply or sends a rejection if the","     * request fails.","     * @param transaction Transaction request that should be processed.","     * @param cookie Cookie of the User that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void doTransactionRequest(final Transaction transaction, final String cookie, final ApiBean api) {","        MessageWrapper data = JSONParser.createMessageWrapper(false, 0, \\"Request\\");","        data.setCookie(cookie);","        data.setMethodType(MethodType.TRANSFER_MONEY);","        data.setData(transaction);","","        System.out.printf(\\"%s Forwarding transaction request.\\\\n\\", PREFIX);","        api.getAuthenticationClient().putFormAsyncWith1Param(\\"/services/authentication/transaction\\",","                \\"data\\", api.getJsonConverter().toJson(data),","                (httpStatusCode, httpContentType, transactionReplyJson) -> {","                    if (httpStatusCode == HTTP_OK) {","                        MessageWrapper messageWrapper = api.getJsonConverter().fromJson(","                                JSONParser.removeEscapeCharacters(transactionReplyJson), MessageWrapper.class);","                        if (!messageWrapper.isError()) {","                            sendTransactionCallback((Transaction) messageWrapper.getData(), api);","                        } else {","                            sendErrorReply(messageWrapper, api);","                        }","                    } else {","                        sendErrorReply(JSONParser.createMessageWrapper(true, 500,","                                \\"An unknown error occurred.\\",","                                \\"There was a problem with one of the HTTP requests\\"), api);","                    }","                });","    }","","    /**","     * Forwards the result of a transaction request to the service that sent the request.","     * @param reply The processed transaction","     * @param api DataBean containing everything in the ApiService","     */","    private static void sendTransactionCallback(final Transaction reply, final ApiBean api) {","        if (reply.isSuccessful() && reply.isProcessed()) {","            long transactionId = reply.getTransactionID();","            System.out.printf(\\"%s Internal transaction %d successful.\\\\n\\\\n\\\\n\\\\n\\", PREFIX, transactionId);","            Map<String, Object> result = new HashMap<>();","            JSONRPC2Response response = new JSONRPC2Response(result, api.getId());","            api.getCallbackBuilder().build().reply(response.toJSONString());","        } else {","            System.out.printf(\\"%s Internal transaction was not successful\\\\n\\\\n\\\\n\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 500, \\"Unknown error occurred.\\"), api);","        }","    }","}",""}
34	5	UnblockCard.java	{"package api.methods;","","import api.ApiBean;","import api.IncorrectInputException;","import com.google.gson.JsonSyntaxException;","import com.thetransactioncompany.jsonrpc2.JSONRPC2Response;","import databeans.MessageWrapper;","import databeans.MethodType;","import databeans.PinCard;","import util.JSONParser;","","import java.util.HashMap;","import java.util.Map;","","import static api.ApiService.PREFIX;","import static api.ApiService.MAX_ACCOUNT_NUMBER_LENGTH;","import static api.methods.SharedUtilityMethods.sendErrorReply;","import static java.net.HttpURLConnection.HTTP_OK;","",/**," * @author Saul"," */","public abstract class UnblockCard {","","    /**","     * Unblocks a blocked pin card, requires logging in.","     * @param params Parameters of the request(authToken, iBAN, pinCard).","     * @param api DataBean containing everything in the ApiService","     */","    public static void unblockCard(final Map<String, Object> params, final ApiBean api) {","        String accountNumber = (String) params.get(\\"iBAN\\");","        String pinCard = (String) params.get(\\"pinCard\\");","        String cookie = (String) params.get(\\"authToken\\");","        PinCard request = new PinCard(accountNumber, Long.parseLong(pinCard));","        System.out.printf(\\"%s Sending pinCard unblock request.\\\\n\\", PREFIX);","        handlePinCardUnblockExceptions(request, cookie, api);","    }","","    /**","     * Tries to verify the input of the pinCard unblock and then forward the request, send a rejection if an","     * exception is thrown.","     * @param pinCard {@link PinCard} that should be unblocked.","     * @param cookie Cookie of the User that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void handlePinCardUnblockExceptions(final PinCard pinCard, final String cookie, final ApiBean api) {","        try {","            verifyPinCardInput(pinCard);","            doPinCardUnblockRequest(pinCard, cookie, api);","        } catch (IncorrectInputException e) {","            System.out.printf(\\"%s %s\\", PREFIX, e.getMessage());","            sendErrorReply(JSONParser.createMessageWrapper(true, 418,","                    \\"One of the parameters has an invalid value.\\", e.getMessage()), api);","        } catch (JsonSyntaxException e) {","            System.out.printf(\\"%s The json received contained incorrect syntax, sending rejection.\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 500, \\"Unknown error occurred.\\"), api);","        }","    }","","    /**","     * Checks if the input for an account link request is correctly formatted and contains correct values.","     * @param pinCard {@link PinCard} that should be unblocked.","     * @throws IncorrectInputException Thrown when a value is not correctly specified.","     * @throws JsonSyntaxException Thrown when the json string is incorrect and cant be parsed.","     */","    private static void verifyPinCardInput(final PinCard pinCard)","            throws IncorrectInputException, JsonSyntaxException {","        final String accountNumber = pinCard.getAccountNumber();","        if (accountNumber == null || accountNumber.length() > MAX_ACCOUNT_NUMBER_LENGTH) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: accountNumber.\\");","        }","    }","","    /**","     * Forwards a String representing a pinCard to the Authentication Service, and processes the reply if it is","     * successful or sends a rejection to the requesting source if it fails.","     * @param pinCard {@link PinCard} that should be unblocked.","     * @param cookie Cookie of the User that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void doPinCardUnblockRequest(final PinCard pinCard, final String cookie, final ApiBean api) {","        MessageWrapper data = JSONParser.createMessageWrapper(false, 0, \\"Request\\");","        data.setCookie(cookie);","        data.setMethodType(MethodType.UNBLOCK_CARD);","        data.setData(pinCard);","","        api.getAuthenticationClient().putFormAsyncWith1Param(\\"/services/authentication/unblockCard\\",","                \\"data\\", api.getJsonConverter().toJson(data), ((httpStatusCode, httpContentType, body) -> {","                    if (httpStatusCode == HTTP_OK) {","                        MessageWrapper messageWrapper = api.getJsonConverter().fromJson(","                                JSONParser.removeEscapeCharacters(body), MessageWrapper.class);","                        if (!messageWrapper.isError()) {","                            sendPinCardUnblockRequestCallback((PinCard) messageWrapper.getData(), api);","                        } else {","                            sendErrorReply(messageWrapper, api);","                        }","                    } else {","                        sendErrorReply(JSONParser.createMessageWrapper(true, 500,","                                \\"An unknown error occurred.\\",","                                \\"There was a problem with one of the HTTP requests\\"), api);","                    }","                }));","    }","","    /**","     * Forwards the result of a pinCard unblock request to the service that sent the request.","     * @param pinCard The result of a pinCard unblock request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void sendPinCardUnblockRequestCallback(final PinCard pinCard, final ApiBean api) {","        System.out.printf(\\"%s PinCard unblocked successfully for AccountNumber: %s, CardNumber: %s\\\\n\\\\n\\\\n\\\\n\\",","                PREFIX, pinCard.getAccountNumber(), pinCard.getCardNumber());","        Map<String, Object> result = new HashMap<>();","        JSONRPC2Response response = new JSONRPC2Response(result, api.getId());","        api.getCallbackBuilder().build().reply(response.toJSONString());","    }","}",""}
35	5	TransferMoney.java	{"package api.methods;","","import api.ApiBean;","import api.IncorrectInputException;","import com.google.gson.JsonSyntaxException;","import com.thetransactioncompany.jsonrpc2.JSONRPC2Response;","import databeans.MessageWrapper;","import databeans.MethodType;","import databeans.Transaction;","import util.JSONParser;","","import java.util.HashMap;","import java.util.Map;","","import static api.ApiService.PREFIX;","import static api.ApiService.MAX_ACCOUNT_NUMBER_LENGTH;","import static api.ApiService.DESCRIPTION_LIMIT;","import static api.methods.SharedUtilityMethods.sendErrorReply;","import static api.methods.SharedUtilityMethods.valueHasCorrectLength;","import static java.net.HttpURLConnection.HTTP_OK;","",/**," * @author Saul"," */","public abstract class TransferMoney {","","    /**","     * Transfer money between accounts, the authToken needs to belong to a user that is authorized to make transactions","     * from the sourceAccount.","     * @param params Parameters of the request (authToken, sourceIBAN, targetIBAN, targetName, amount, description).","     * @param api DataBean containing everything in the ApiService","     */","    public static void transferMoney(final Map<String, Object> params, final ApiBean api) {","        String cookie = (String) params.get(\\"authToken\\");","        Transaction transaction = JSONParser.createJsonTransaction(-1, (String) params.get(\\"sourceIBAN\\"),","                (String) params.get(\\"targetIBAN\\"), (String) params.get(\\"targetName\\"),","                (String) params.get(\\"description\\"), (Double) params.get(\\"amount\\"), false, false);","        System.out.printf(\\"%s Sending internal transaction.\\\\n\\", PREFIX);","        handleTransactionExceptions(transaction, cookie, api);","    }","","    /**","     * Tries to verify the input of a transaction request and then forward the request, sends an error if an","     * exception occurs.","     * @param transaction The transaction to test/process","     * @param cookie Cookie of the user that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void handleTransactionExceptions(","            final Transaction transaction, final String cookie, final ApiBean api) {","        try {","            verifyTransactionInput(transaction);","            doTransactionRequest(transaction, cookie, api);","        } catch (IncorrectInputException e) {","            System.out.printf(\\"%s %s, sending rejection.\\\\n\\", PREFIX, e.getMessage());","            sendErrorReply(JSONParser.createMessageWrapper(true, 418,","                    \\"One of the parameters has an invalid value.\\"), api);","        } catch (JsonSyntaxException e) {","            System.out.printf(\\"%s The json received contained incorrect syntax, sending rejection.\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 500,","                    \\"Unknown error occurred.\\", \\"Syntax error when parsing json.\\"), api);","        } catch (NumberFormatException e) {","            System.out.printf(\\"%s The transaction amount was incorrectly specified, sending rejection.\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 418,","                    \\"One of the parameters has an invalid value.\\",","                    \\"The following variable was incorrectly specified: transactionAmount.\\"), api);","        }","    }","","    /**","     * Checks if the input for a transaction request is correctly formatted and contains correct values.","     * @param transaction The transaction request.","     * @throws IncorrectInputException Thrown when a value is not correctly specified.","     * @throws JsonSyntaxException Thrown when the json string is incorrect and cant be parsed.","     * @throws NumberFormatException Thrown when a string value could not be parsed to a Long.","     */","    private static void verifyTransactionInput(final Transaction transaction)","            throws IncorrectInputException, JsonSyntaxException, NumberFormatException {","        final String sourceAccountNumber = transaction.getSourceAccountNumber();","        final String destinationAccountNumber = transaction.getDestinationAccountNumber();","        final String destinationAccountHolderName = transaction.getDestinationAccountHolderName();","        final String transactionDescription = transaction.getDescription();","        final double transactionAmount = transaction.getTransactionAmount();","        if (sourceAccountNumber == null || sourceAccountNumber.length() > MAX_ACCOUNT_NUMBER_LENGTH) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: sourceAccountNumber.\\");","        } else if (destinationAccountNumber == null || destinationAccountNumber.length() > MAX_ACCOUNT_NUMBER_LENGTH) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified:\\"","                    + \\" destinationAccountNumber.\\");","        } else if (destinationAccountHolderName == null || !valueHasCorrectLength(destinationAccountHolderName)) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified:\\"","                    + \\" destinationAccountHolderName.\\");","        } else if (transactionDescription == null || transactionDescription.length() > DESCRIPTION_LIMIT) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified:\\"","                    + \\" transactionDescription.\\");","        } else if (transactionAmount < 0) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: transactionAmount.\\");","        } else if (transaction.isProcessed()) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: isProcessed.\\");","        } else if (transaction.isSuccessful()) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: isSuccessful.\\");","        }","    }","","    /**","     * Forwards transaction request to the Authentication service and forwards the reply or sends a rejection if the","     * request fails.","     * @param transaction Transaction request that should be processed.","     * @param cookie Cookie of the User that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void doTransactionRequest(final Transaction transaction, final String cookie, final ApiBean api) {","        MessageWrapper data = JSONParser.createMessageWrapper(false, 0, \\"Request\\");","        data.setCookie(cookie);","        data.setMethodType(MethodType.TRANSFER_MONEY);","        data.setData(transaction);","","        System.out.printf(\\"%s Forwarding transaction request.\\\\n\\", PREFIX);","        api.getAuthenticationClient().putFormAsyncWith1Param(\\"/services/authentication/transaction\\",","                \\"data\\", api.getJsonConverter().toJson(data),","                (httpStatusCode, httpContentType, transactionReplyJson) -> {","                    if (httpStatusCode == HTTP_OK) {","                        MessageWrapper messageWrapper = api.getJsonConverter().fromJson(","                                JSONParser.removeEscapeCharacters(transactionReplyJson), MessageWrapper.class);","                        if (!messageWrapper.isError()) {","                            sendTransactionCallback((Transaction) messageWrapper.getData(), api);","                        } else {","                            sendErrorReply(messageWrapper, api);","                        }","                    } else {","                        sendErrorReply(JSONParser.createMessageWrapper(true, 500,","                                \\"An unknown error occurred.\\",","                                \\"There was a problem with one of the HTTP requests\\"), api);","                    }","                });","    }","","    /**","     * Forwards the result of a transaction request to the service that sent the request.","     * @param reply The processed transaction","     * @param api DataBean containing everything in the ApiService","     */","    private static void sendTransactionCallback(final Transaction reply, final ApiBean api) {","        if (reply.isSuccessful() && reply.isProcessed()) {","            long transactionId = reply.getTransactionID();","            System.out.printf(\\"%s Internal transaction %d successful.\\\\n\\\\n\\\\n\\\\n\\", PREFIX, transactionId);","            Map<String, Object> result = new HashMap<>();","            JSONRPC2Response response = new JSONRPC2Response(result, api.getId());","            api.getCallbackBuilder().build().reply(response.toJSONString());","        } else {","            System.out.printf(\\"%s Internal transaction was not successful\\\\n\\\\n\\\\n\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 500, \\"Unknown error occurred.\\"), api);","        }","    }","}",""}
36	5	TransferMoney.java	{"package api.methods;","","import api.ApiBean;","import api.IncorrectInputException;","import com.google.gson.JsonSyntaxException;","import com.thetransactioncompany.jsonrpc2.JSONRPC2Response;","import databeans.MessageWrapper;","import databeans.MethodType;","import databeans.Transaction;","import util.JSONParser;","","import java.util.HashMap;","import java.util.Map;","","import static api.ApiService.PREFIX;","import static api.ApiService.MAX_ACCOUNT_NUMBER_LENGTH;","import static api.ApiService.DESCRIPTION_LIMIT;","import static api.methods.SharedUtilityMethods.sendErrorReply;","import static api.methods.SharedUtilityMethods.valueHasCorrectLength;","import static java.net.HttpURLConnection.HTTP_OK;","",/**," * @author Saul"," */","public abstract class TransferMoney {","","    /**","     * Transfer money between accounts, the authToken needs to belong to a user that is authorized to make transactions","     * from the sourceAccount.","     * @param params Parameters of the request (authToken, sourceIBAN, targetIBAN, targetName, amount, description).","     * @param api DataBean containing everything in the ApiService","     */","    public static void transferMoney(final Map<String, Object> params, final ApiBean api) {","        String cookie = (String) params.get(\\"authToken\\");","        Transaction transaction = JSONParser.createJsonTransaction(-1, (String) params.get(\\"sourceIBAN\\"),","                (String) params.get(\\"targetIBAN\\"), (String) params.get(\\"targetName\\"),","                (String) params.get(\\"description\\"), (Double) params.get(\\"amount\\"), false, false);","        System.out.printf(\\"%s Sending internal transaction.\\\\n\\", PREFIX);","        handleTransactionExceptions(transaction, cookie, api);","    }","","    /**","     * Tries to verify the input of a transaction request and then forward the request, sends an error if an","     * exception occurs.","     * @param transaction The transaction to test/process","     * @param cookie Cookie of the user that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void handleTransactionExceptions(","            final Transaction transaction, final String cookie, final ApiBean api) {","        try {","            verifyTransactionInput(transaction);","            doTransactionRequest(transaction, cookie, api);","        } catch (IncorrectInputException e) {","            System.out.printf(\\"%s %s, sending rejection.\\\\n\\", PREFIX, e.getMessage());","            sendErrorReply(JSONParser.createMessageWrapper(true, 418,","                    \\"One of the parameters has an invalid value.\\"), api);","        } catch (JsonSyntaxException e) {","            System.out.printf(\\"%s The json received contained incorrect syntax, sending rejection.\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 500,","                    \\"Unknown error occurred.\\", \\"Syntax error when parsing json.\\"), api);","        } catch (NumberFormatException e) {","            System.out.printf(\\"%s The transaction amount was incorrectly specified, sending rejection.\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 418,","                    \\"One of the parameters has an invalid value.\\",","                    \\"The following variable was incorrectly specified: transactionAmount.\\"), api);","        }","    }","","    /**","     * Checks if the input for a transaction request is correctly formatted and contains correct values.","     * @param transaction The transaction request.","     * @throws IncorrectInputException Thrown when a value is not correctly specified.","     * @throws JsonSyntaxException Thrown when the json string is incorrect and cant be parsed.","     * @throws NumberFormatException Thrown when a string value could not be parsed to a Long.","     */","    private static void verifyTransactionInput(final Transaction transaction)","            throws IncorrectInputException, JsonSyntaxException, NumberFormatException {","        final String sourceAccountNumber = transaction.getSourceAccountNumber();","        final String destinationAccountNumber = transaction.getDestinationAccountNumber();","        final String destinationAccountHolderName = transaction.getDestinationAccountHolderName();","        final String transactionDescription = transaction.getDescription();","        final double transactionAmount = transaction.getTransactionAmount();","        if (sourceAccountNumber == null || sourceAccountNumber.length() > MAX_ACCOUNT_NUMBER_LENGTH) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: sourceAccountNumber.\\");","        } else if (destinationAccountNumber == null || destinationAccountNumber.length() > MAX_ACCOUNT_NUMBER_LENGTH) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified:\\"","                    + \\" destinationAccountNumber.\\");","        } else if (destinationAccountHolderName == null || !valueHasCorrectLength(destinationAccountHolderName)) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified:\\"","                    + \\" destinationAccountHolderName.\\");","        } else if (transactionDescription == null || transactionDescription.length() > DESCRIPTION_LIMIT) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified:\\"","                    + \\" transactionDescription.\\");","        } else if (transactionAmount < 0) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: transactionAmount.\\");","        } else if (transaction.isProcessed()) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: isProcessed.\\");","        } else if (transaction.isSuccessful()) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: isSuccessful.\\");","        }","    }","","    /**","     * Forwards transaction request to the Authentication service and forwards the reply or sends a rejection if the","     * request fails.","     * @param transaction Transaction request that should be processed.","     * @param cookie Cookie of the User that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void doTransactionRequest(final Transaction transaction, final String cookie, final ApiBean api) {","        MessageWrapper data = JSONParser.createMessageWrapper(false, 0, \\"Request\\");","        data.setCookie(cookie);","        data.setMethodType(MethodType.TRANSFER_MONEY);","        data.setData(transaction);","","        System.out.printf(\\"%s Forwarding transaction request.\\\\n\\", PREFIX);","        api.getAuthenticationClient().putFormAsyncWith1Param(\\"/services/authentication/transaction\\",","                \\"data\\", api.getJsonConverter().toJson(data),","                (httpStatusCode, httpContentType, transactionReplyJson) -> {","                    if (httpStatusCode == HTTP_OK) {","                        MessageWrapper messageWrapper = api.getJsonConverter().fromJson(","                                JSONParser.removeEscapeCharacters(transactionReplyJson), MessageWrapper.class);","                        if (!messageWrapper.isError()) {","                            sendTransactionCallback((Transaction) messageWrapper.getData(), api);","                        } else {","                            sendErrorReply(messageWrapper, api);","                        }","                    } else {","                        sendErrorReply(JSONParser.createMessageWrapper(true, 500,","                                \\"An unknown error occurred.\\",","                                \\"There was a problem with one of the HTTP requests\\"), api);","                    }","                });","    }","","    /**","     * Forwards the result of a transaction request to the service that sent the request.","     * @param reply The processed transaction","     * @param api DataBean containing everything in the ApiService","     */","    private static void sendTransactionCallback(final Transaction reply, final ApiBean api) {","        if (reply.isSuccessful() && reply.isProcessed()) {","            long transactionId = reply.getTransactionID();","            System.out.printf(\\"%s Internal transaction %d successful.\\\\n\\\\n\\\\n\\\\n\\", PREFIX, transactionId);","            Map<String, Object> result = new HashMap<>();","            JSONRPC2Response response = new JSONRPC2Response(result, api.getId());","            api.getCallbackBuilder().build().reply(response.toJSONString());","        } else {","            System.out.printf(\\"%s Internal transaction was not successful\\\\n\\\\n\\\\n\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 500, \\"Unknown error occurred.\\"), api);","        }","    }","}",""}
37	5	UnblockCard.java	{"package api.methods;","","import api.ApiBean;","import api.IncorrectInputException;","import com.google.gson.JsonSyntaxException;","import com.thetransactioncompany.jsonrpc2.JSONRPC2Response;","import databeans.MessageWrapper;","import databeans.MethodType;","import databeans.PinCard;","import util.JSONParser;","","import java.util.HashMap;","import java.util.Map;","","import static api.ApiService.PREFIX;","import static api.ApiService.MAX_ACCOUNT_NUMBER_LENGTH;","import static api.methods.SharedUtilityMethods.sendErrorReply;","import static java.net.HttpURLConnection.HTTP_OK;","",/**," * @author Saul"," */","public abstract class UnblockCard {","","    /**","     * Unblocks a blocked pin card, requires logging in.","     * @param params Parameters of the request(authToken, iBAN, pinCard).","     * @param api DataBean containing everything in the ApiService","     */","    public static void unblockCard(final Map<String, Object> params, final ApiBean api) {","        String accountNumber = (String) params.get(\\"iBAN\\");","        String pinCard = (String) params.get(\\"pinCard\\");","        String cookie = (String) params.get(\\"authToken\\");","        PinCard request = new PinCard(accountNumber, Long.parseLong(pinCard));","        System.out.printf(\\"%s Sending pinCard unblock request.\\\\n\\", PREFIX);","        handlePinCardUnblockExceptions(request, cookie, api);","    }","","    /**","     * Tries to verify the input of the pinCard unblock and then forward the request, send a rejection if an","     * exception is thrown.","     * @param pinCard {@link PinCard} that should be unblocked.","     * @param cookie Cookie of the User that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void handlePinCardUnblockExceptions(final PinCard pinCard, final String cookie, final ApiBean api) {","        try {","            verifyPinCardInput(pinCard);","            doPinCardUnblockRequest(pinCard, cookie, api);","        } catch (IncorrectInputException e) {","            System.out.printf(\\"%s %s\\", PREFIX, e.getMessage());","            sendErrorReply(JSONParser.createMessageWrapper(true, 418,","                    \\"One of the parameters has an invalid value.\\", e.getMessage()), api);","        } catch (JsonSyntaxException e) {","            System.out.printf(\\"%s The json received contained incorrect syntax, sending rejection.\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 500, \\"Unknown error occurred.\\"), api);","        }","    }","","    /**","     * Checks if the input for an account link request is correctly formatted and contains correct values.","     * @param pinCard {@link PinCard} that should be unblocked.","     * @throws IncorrectInputException Thrown when a value is not correctly specified.","     * @throws JsonSyntaxException Thrown when the json string is incorrect and cant be parsed.","     */","    private static void verifyPinCardInput(final PinCard pinCard)","            throws IncorrectInputException, JsonSyntaxException {","        final String accountNumber = pinCard.getAccountNumber();","        if (accountNumber == null || accountNumber.length() > MAX_ACCOUNT_NUMBER_LENGTH) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: accountNumber.\\");","        }","    }","","    /**","     * Forwards a String representing a pinCard to the Authentication Service, and processes the reply if it is","     * successful or sends a rejection to the requesting source if it fails.","     * @param pinCard {@link PinCard} that should be unblocked.","     * @param cookie Cookie of the User that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void doPinCardUnblockRequest(final PinCard pinCard, final String cookie, final ApiBean api) {","        MessageWrapper data = JSONParser.createMessageWrapper(false, 0, \\"Request\\");","        data.setCookie(cookie);","        data.setMethodType(MethodType.UNBLOCK_CARD);","        data.setData(pinCard);","","        api.getAuthenticationClient().putFormAsyncWith1Param(\\"/services/authentication/unblockCard\\",","                \\"data\\", api.getJsonConverter().toJson(data), ((httpStatusCode, httpContentType, body) -> {","                    if (httpStatusCode == HTTP_OK) {","                        MessageWrapper messageWrapper = api.getJsonConverter().fromJson(","                                JSONParser.removeEscapeCharacters(body), MessageWrapper.class);","                        if (!messageWrapper.isError()) {","                            sendPinCardUnblockRequestCallback((PinCard) messageWrapper.getData(), api);","                        } else {","                            sendErrorReply(messageWrapper, api);","                        }","                    } else {","                        sendErrorReply(JSONParser.createMessageWrapper(true, 500,","                                \\"An unknown error occurred.\\",","                                \\"There was a problem with one of the HTTP requests\\"), api);","                    }","                }));","    }","","    /**","     * Forwards the result of a pinCard unblock request to the service that sent the request.","     * @param pinCard The result of a pinCard unblock request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void sendPinCardUnblockRequestCallback(final PinCard pinCard, final ApiBean api) {","        System.out.printf(\\"%s PinCard unblocked successfully for AccountNumber: %s, CardNumber: %s\\\\n\\\\n\\\\n\\\\n\\",","                PREFIX, pinCard.getAccountNumber(), pinCard.getCardNumber());","        Map<String, Object> result = new HashMap<>();","        JSONRPC2Response response = new JSONRPC2Response(result, api.getId());","        api.getCallbackBuilder().build().reply(response.toJSONString());","    }","}",""}
39	5	TransferMoney.java	{"package api.methods;","","import api.ApiBean;","import api.IncorrectInputException;","import com.google.gson.JsonSyntaxException;","import com.thetransactioncompany.jsonrpc2.JSONRPC2Response;","import databeans.MessageWrapper;","import databeans.MethodType;","import databeans.Transaction;","import util.JSONParser;","","import java.util.HashMap;","import java.util.Map;","","import static api.ApiService.PREFIX;","import static api.ApiService.MAX_ACCOUNT_NUMBER_LENGTH;","import static api.ApiService.DESCRIPTION_LIMIT;","import static api.methods.SharedUtilityMethods.sendErrorReply;","import static api.methods.SharedUtilityMethods.valueHasCorrectLength;","import static java.net.HttpURLConnection.HTTP_OK;","",/**," * @author Saul"," */","public abstract class TransferMoney {","","    /**","     * Transfer money between accounts, the authToken needs to belong to a user that is authorized to make transactions","     * from the sourceAccount.","     * @param params Parameters of the request (authToken, sourceIBAN, targetIBAN, targetName, amount, description).","     * @param api DataBean containing everything in the ApiService","     */","    public static void transferMoney(final Map<String, Object> params, final ApiBean api) {","        String cookie = (String) params.get(\\"authToken\\");","        Transaction transaction = JSONParser.createJsonTransaction(-1, (String) params.get(\\"sourceIBAN\\"),","                (String) params.get(\\"targetIBAN\\"), (String) params.get(\\"targetName\\"),","                (String) params.get(\\"description\\"), (Double) params.get(\\"amount\\"), false, false);","        System.out.printf(\\"%s Sending internal transaction.\\\\n\\", PREFIX);","        handleTransactionExceptions(transaction, cookie, api);","    }","","    /**","     * Tries to verify the input of a transaction request and then forward the request, sends an error if an","     * exception occurs.","     * @param transaction The transaction to test/process","     * @param cookie Cookie of the user that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void handleTransactionExceptions(","            final Transaction transaction, final String cookie, final ApiBean api) {","        try {","            verifyTransactionInput(transaction);","            doTransactionRequest(transaction, cookie, api);","        } catch (IncorrectInputException e) {","            System.out.printf(\\"%s %s, sending rejection.\\\\n\\", PREFIX, e.getMessage());","            sendErrorReply(JSONParser.createMessageWrapper(true, 418,","                    \\"One of the parameters has an invalid value.\\"), api);","        } catch (JsonSyntaxException e) {","            System.out.printf(\\"%s The json received contained incorrect syntax, sending rejection.\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 500,","                    \\"Unknown error occurred.\\", \\"Syntax error when parsing json.\\"), api);","        } catch (NumberFormatException e) {","            System.out.printf(\\"%s The transaction amount was incorrectly specified, sending rejection.\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 418,","                    \\"One of the parameters has an invalid value.\\",","                    \\"The following variable was incorrectly specified: transactionAmount.\\"), api);","        }","    }","","    /**","     * Checks if the input for a transaction request is correctly formatted and contains correct values.","     * @param transaction The transaction request.","     * @throws IncorrectInputException Thrown when a value is not correctly specified.","     * @throws JsonSyntaxException Thrown when the json string is incorrect and cant be parsed.","     * @throws NumberFormatException Thrown when a string value could not be parsed to a Long.","     */","    private static void verifyTransactionInput(final Transaction transaction)","            throws IncorrectInputException, JsonSyntaxException, NumberFormatException {","        final String sourceAccountNumber = transaction.getSourceAccountNumber();","        final String destinationAccountNumber = transaction.getDestinationAccountNumber();","        final String destinationAccountHolderName = transaction.getDestinationAccountHolderName();","        final String transactionDescription = transaction.getDescription();","        final double transactionAmount = transaction.getTransactionAmount();","        if (sourceAccountNumber == null || sourceAccountNumber.length() > MAX_ACCOUNT_NUMBER_LENGTH) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: sourceAccountNumber.\\");","        } else if (destinationAccountNumber == null || destinationAccountNumber.length() > MAX_ACCOUNT_NUMBER_LENGTH) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified:\\"","                    + \\" destinationAccountNumber.\\");","        } else if (destinationAccountHolderName == null || !valueHasCorrectLength(destinationAccountHolderName)) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified:\\"","                    + \\" destinationAccountHolderName.\\");","        } else if (transactionDescription == null || transactionDescription.length() > DESCRIPTION_LIMIT) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified:\\"","                    + \\" transactionDescription.\\");","        } else if (transactionAmount < 0) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: transactionAmount.\\");","        } else if (transaction.isProcessed()) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: isProcessed.\\");","        } else if (transaction.isSuccessful()) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: isSuccessful.\\");","        }","    }","","    /**","     * Forwards transaction request to the Authentication service and forwards the reply or sends a rejection if the","     * request fails.","     * @param transaction Transaction request that should be processed.","     * @param cookie Cookie of the User that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void doTransactionRequest(final Transaction transaction, final String cookie, final ApiBean api) {","        MessageWrapper data = JSONParser.createMessageWrapper(false, 0, \\"Request\\");","        data.setCookie(cookie);","        data.setMethodType(MethodType.TRANSFER_MONEY);","        data.setData(transaction);","","        System.out.printf(\\"%s Forwarding transaction request.\\\\n\\", PREFIX);","        api.getAuthenticationClient().putFormAsyncWith1Param(\\"/services/authentication/transaction\\",","                \\"data\\", api.getJsonConverter().toJson(data),","                (httpStatusCode, httpContentType, transactionReplyJson) -> {","                    if (httpStatusCode == HTTP_OK) {","                        MessageWrapper messageWrapper = api.getJsonConverter().fromJson(","                                JSONParser.removeEscapeCharacters(transactionReplyJson), MessageWrapper.class);","                        if (!messageWrapper.isError()) {","                            sendTransactionCallback((Transaction) messageWrapper.getData(), api);","                        } else {","                            sendErrorReply(messageWrapper, api);","                        }","                    } else {","                        sendErrorReply(JSONParser.createMessageWrapper(true, 500,","                                \\"An unknown error occurred.\\",","                                \\"There was a problem with one of the HTTP requests\\"), api);","                    }","                });","    }","","    /**","     * Forwards the result of a transaction request to the service that sent the request.","     * @param reply The processed transaction","     * @param api DataBean containing everything in the ApiService","     */","    private static void sendTransactionCallback(final Transaction reply, final ApiBean api) {","        if (reply.isSuccessful() && reply.isProcessed()) {","            long transactionId = reply.getTransactionID();","            System.out.printf(\\"%s Internal transaction %d successful.\\\\n\\\\n\\\\n\\\\n\\", PREFIX, transactionId);","            Map<String, Object> result = new HashMap<>();","            JSONRPC2Response response = new JSONRPC2Response(result, api.getId());","            api.getCallbackBuilder().build().reply(response.toJSONString());","        } else {","            System.out.printf(\\"%s Internal transaction was not successful\\\\n\\\\n\\\\n\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 500, \\"Unknown error occurred.\\"), api);","        }","    }","}",""}
38	5	UnblockCard.java	{"package api.methods;","","import api.ApiBean;","import api.IncorrectInputException;","import com.google.gson.JsonSyntaxException;","import com.thetransactioncompany.jsonrpc2.JSONRPC2Response;","import databeans.MessageWrapper;","import databeans.MethodType;","import databeans.PinCard;","import util.JSONParser;","","import java.util.HashMap;","import java.util.Map;","","import static api.ApiService.PREFIX;","import static api.ApiService.MAX_ACCOUNT_NUMBER_LENGTH;","import static api.methods.SharedUtilityMethods.sendErrorReply;","import static java.net.HttpURLConnection.HTTP_OK;","",/**," * @author Saul"," */","public abstract class UnblockCard {","","    /**","     * Unblocks a blocked pin card, requires logging in.","     * @param params Parameters of the request(authToken, iBAN, pinCard).","     * @param api DataBean containing everything in the ApiService","     */","    public static void unblockCard(final Map<String, Object> params, final ApiBean api) {","        String accountNumber = (String) params.get(\\"iBAN\\");","        String pinCard = (String) params.get(\\"pinCard\\");","        String cookie = (String) params.get(\\"authToken\\");","        PinCard request = new PinCard(accountNumber, Long.parseLong(pinCard));","        System.out.printf(\\"%s Sending pinCard unblock request.\\\\n\\", PREFIX);","        handlePinCardUnblockExceptions(request, cookie, api);","    }","","    /**","     * Tries to verify the input of the pinCard unblock and then forward the request, send a rejection if an","     * exception is thrown.","     * @param pinCard {@link PinCard} that should be unblocked.","     * @param cookie Cookie of the User that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void handlePinCardUnblockExceptions(final PinCard pinCard, final String cookie, final ApiBean api) {","        try {","            verifyPinCardInput(pinCard);","            doPinCardUnblockRequest(pinCard, cookie, api);","        } catch (IncorrectInputException e) {","            System.out.printf(\\"%s %s\\", PREFIX, e.getMessage());","            sendErrorReply(JSONParser.createMessageWrapper(true, 418,","                    \\"One of the parameters has an invalid value.\\", e.getMessage()), api);","        } catch (JsonSyntaxException e) {","            System.out.printf(\\"%s The json received contained incorrect syntax, sending rejection.\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 500, \\"Unknown error occurred.\\"), api);","        }","    }","","    /**","     * Checks if the input for an account link request is correctly formatted and contains correct values.","     * @param pinCard {@link PinCard} that should be unblocked.","     * @throws IncorrectInputException Thrown when a value is not correctly specified.","     * @throws JsonSyntaxException Thrown when the json string is incorrect and cant be parsed.","     */","    private static void verifyPinCardInput(final PinCard pinCard)","            throws IncorrectInputException, JsonSyntaxException {","        final String accountNumber = pinCard.getAccountNumber();","        if (accountNumber == null || accountNumber.length() > MAX_ACCOUNT_NUMBER_LENGTH) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: accountNumber.\\");","        }","    }","","    /**","     * Forwards a String representing a pinCard to the Authentication Service, and processes the reply if it is","     * successful or sends a rejection to the requesting source if it fails.","     * @param pinCard {@link PinCard} that should be unblocked.","     * @param cookie Cookie of the User that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void doPinCardUnblockRequest(final PinCard pinCard, final String cookie, final ApiBean api) {","        MessageWrapper data = JSONParser.createMessageWrapper(false, 0, \\"Request\\");","        data.setCookie(cookie);","        data.setMethodType(MethodType.UNBLOCK_CARD);","        data.setData(pinCard);","","        api.getAuthenticationClient().putFormAsyncWith1Param(\\"/services/authentication/unblockCard\\",","                \\"data\\", api.getJsonConverter().toJson(data), ((httpStatusCode, httpContentType, body) -> {","                    if (httpStatusCode == HTTP_OK) {","                        MessageWrapper messageWrapper = api.getJsonConverter().fromJson(","                                JSONParser.removeEscapeCharacters(body), MessageWrapper.class);","                        if (!messageWrapper.isError()) {","                            sendPinCardUnblockRequestCallback((PinCard) messageWrapper.getData(), api);","                        } else {","                            sendErrorReply(messageWrapper, api);","                        }","                    } else {","                        sendErrorReply(JSONParser.createMessageWrapper(true, 500,","                                \\"An unknown error occurred.\\",","                                \\"There was a problem with one of the HTTP requests\\"), api);","                    }","                }));","    }","","    /**","     * Forwards the result of a pinCard unblock request to the service that sent the request.","     * @param pinCard The result of a pinCard unblock request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void sendPinCardUnblockRequestCallback(final PinCard pinCard, final ApiBean api) {","        System.out.printf(\\"%s PinCard unblocked successfully for AccountNumber: %s, CardNumber: %s\\\\n\\\\n\\\\n\\\\n\\",","                PREFIX, pinCard.getAccountNumber(), pinCard.getCardNumber());","        Map<String, Object> result = new HashMap<>();","        JSONRPC2Response response = new JSONRPC2Response(result, api.getId());","        api.getCallbackBuilder().build().reply(response.toJSONString());","    }","}",""}
40	5	UnblockCard.java	{"package api.methods;","","import api.ApiBean;","import api.IncorrectInputException;","import com.google.gson.JsonSyntaxException;","import com.thetransactioncompany.jsonrpc2.JSONRPC2Response;","import databeans.MessageWrapper;","import databeans.MethodType;","import databeans.PinCard;","import util.JSONParser;","","import java.util.HashMap;","import java.util.Map;","","import static api.ApiService.PREFIX;","import static api.ApiService.MAX_ACCOUNT_NUMBER_LENGTH;","import static api.methods.SharedUtilityMethods.sendErrorReply;","import static java.net.HttpURLConnection.HTTP_OK;","",/**," * @author Saul"," */","public abstract class UnblockCard {","","    /**","     * Unblocks a blocked pin card, requires logging in.","     * @param params Parameters of the request(authToken, iBAN, pinCard).","     * @param api DataBean containing everything in the ApiService","     */","    public static void unblockCard(final Map<String, Object> params, final ApiBean api) {","        String accountNumber = (String) params.get(\\"iBAN\\");","        String pinCard = (String) params.get(\\"pinCard\\");","        String cookie = (String) params.get(\\"authToken\\");","        PinCard request = new PinCard(accountNumber, Long.parseLong(pinCard));","        System.out.printf(\\"%s Sending pinCard unblock request.\\\\n\\", PREFIX);","        handlePinCardUnblockExceptions(request, cookie, api);","    }","","    /**","     * Tries to verify the input of the pinCard unblock and then forward the request, send a rejection if an","     * exception is thrown.","     * @param pinCard {@link PinCard} that should be unblocked.","     * @param cookie Cookie of the User that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void handlePinCardUnblockExceptions(final PinCard pinCard, final String cookie, final ApiBean api) {","        try {","            verifyPinCardInput(pinCard);","            doPinCardUnblockRequest(pinCard, cookie, api);","        } catch (IncorrectInputException e) {","            System.out.printf(\\"%s %s\\", PREFIX, e.getMessage());","            sendErrorReply(JSONParser.createMessageWrapper(true, 418,","                    \\"One of the parameters has an invalid value.\\", e.getMessage()), api);","        } catch (JsonSyntaxException e) {","            System.out.printf(\\"%s The json received contained incorrect syntax, sending rejection.\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 500, \\"Unknown error occurred.\\"), api);","        }","    }","","    /**","     * Checks if the input for an account link request is correctly formatted and contains correct values.","     * @param pinCard {@link PinCard} that should be unblocked.","     * @throws IncorrectInputException Thrown when a value is not correctly specified.","     * @throws JsonSyntaxException Thrown when the json string is incorrect and cant be parsed.","     */","    private static void verifyPinCardInput(final PinCard pinCard)","            throws IncorrectInputException, JsonSyntaxException {","        final String accountNumber = pinCard.getAccountNumber();","        if (accountNumber == null || accountNumber.length() > MAX_ACCOUNT_NUMBER_LENGTH) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: accountNumber.\\");","        }","    }","","    /**","     * Forwards a String representing a pinCard to the Authentication Service, and processes the reply if it is","     * successful or sends a rejection to the requesting source if it fails.","     * @param pinCard {@link PinCard} that should be unblocked.","     * @param cookie Cookie of the User that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void doPinCardUnblockRequest(final PinCard pinCard, final String cookie, final ApiBean api) {","        MessageWrapper data = JSONParser.createMessageWrapper(false, 0, \\"Request\\");","        data.setCookie(cookie);","        data.setMethodType(MethodType.UNBLOCK_CARD);","        data.setData(pinCard);","","        api.getAuthenticationClient().putFormAsyncWith1Param(\\"/services/authentication/unblockCard\\",","                \\"data\\", api.getJsonConverter().toJson(data), ((httpStatusCode, httpContentType, body) -> {","                    if (httpStatusCode == HTTP_OK) {","                        MessageWrapper messageWrapper = api.getJsonConverter().fromJson(","                                JSONParser.removeEscapeCharacters(body), MessageWrapper.class);","                        if (!messageWrapper.isError()) {","                            sendPinCardUnblockRequestCallback((PinCard) messageWrapper.getData(), api);","                        } else {","                            sendErrorReply(messageWrapper, api);","                        }","                    } else {","                        sendErrorReply(JSONParser.createMessageWrapper(true, 500,","                                \\"An unknown error occurred.\\",","                                \\"There was a problem with one of the HTTP requests\\"), api);","                    }","                }));","    }","","    /**","     * Forwards the result of a pinCard unblock request to the service that sent the request.","     * @param pinCard The result of a pinCard unblock request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void sendPinCardUnblockRequestCallback(final PinCard pinCard, final ApiBean api) {","        System.out.printf(\\"%s PinCard unblocked successfully for AccountNumber: %s, CardNumber: %s\\\\n\\\\n\\\\n\\\\n\\",","                PREFIX, pinCard.getAccountNumber(), pinCard.getCardNumber());","        Map<String, Object> result = new HashMap<>();","        JSONRPC2Response response = new JSONRPC2Response(result, api.getId());","        api.getCallbackBuilder().build().reply(response.toJSONString());","    }","}",""}
41	5	TransferMoney.java	{"package api.methods;","","import api.ApiBean;","import api.IncorrectInputException;","import com.google.gson.JsonSyntaxException;","import com.thetransactioncompany.jsonrpc2.JSONRPC2Response;","import databeans.MessageWrapper;","import databeans.MethodType;","import databeans.Transaction;","import util.JSONParser;","","import java.util.HashMap;","import java.util.Map;","","import static api.ApiService.PREFIX;","import static api.ApiService.MAX_ACCOUNT_NUMBER_LENGTH;","import static api.ApiService.DESCRIPTION_LIMIT;","import static api.methods.SharedUtilityMethods.sendErrorReply;","import static api.methods.SharedUtilityMethods.valueHasCorrectLength;","import static java.net.HttpURLConnection.HTTP_OK;","",/**," * @author Saul"," */","public abstract class TransferMoney {","","    /**","     * Transfer money between accounts, the authToken needs to belong to a user that is authorized to make transactions","     * from the sourceAccount.","     * @param params Parameters of the request (authToken, sourceIBAN, targetIBAN, targetName, amount, description).","     * @param api DataBean containing everything in the ApiService","     */","    public static void transferMoney(final Map<String, Object> params, final ApiBean api) {","        String cookie = (String) params.get(\\"authToken\\");","        Transaction transaction = JSONParser.createJsonTransaction(-1, (String) params.get(\\"sourceIBAN\\"),","                (String) params.get(\\"targetIBAN\\"), (String) params.get(\\"targetName\\"),","                (String) params.get(\\"description\\"), (Double) params.get(\\"amount\\"), false, false);","        System.out.printf(\\"%s Sending internal transaction.\\\\n\\", PREFIX);","        handleTransactionExceptions(transaction, cookie, api);","    }","","    /**","     * Tries to verify the input of a transaction request and then forward the request, sends an error if an","     * exception occurs.","     * @param transaction The transaction to test/process","     * @param cookie Cookie of the user that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void handleTransactionExceptions(","            final Transaction transaction, final String cookie, final ApiBean api) {","        try {","            verifyTransactionInput(transaction);","            doTransactionRequest(transaction, cookie, api);","        } catch (IncorrectInputException e) {","            System.out.printf(\\"%s %s, sending rejection.\\\\n\\", PREFIX, e.getMessage());","            sendErrorReply(JSONParser.createMessageWrapper(true, 418,","                    \\"One of the parameters has an invalid value.\\"), api);","        } catch (JsonSyntaxException e) {","            System.out.printf(\\"%s The json received contained incorrect syntax, sending rejection.\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 500,","                    \\"Unknown error occurred.\\", \\"Syntax error when parsing json.\\"), api);","        } catch (NumberFormatException e) {","            System.out.printf(\\"%s The transaction amount was incorrectly specified, sending rejection.\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 418,","                    \\"One of the parameters has an invalid value.\\",","                    \\"The following variable was incorrectly specified: transactionAmount.\\"), api);","        }","    }","","    /**","     * Checks if the input for a transaction request is correctly formatted and contains correct values.","     * @param transaction The transaction request.","     * @throws IncorrectInputException Thrown when a value is not correctly specified.","     * @throws JsonSyntaxException Thrown when the json string is incorrect and cant be parsed.","     * @throws NumberFormatException Thrown when a string value could not be parsed to a Long.","     */","    private static void verifyTransactionInput(final Transaction transaction)","            throws IncorrectInputException, JsonSyntaxException, NumberFormatException {","        final String sourceAccountNumber = transaction.getSourceAccountNumber();","        final String destinationAccountNumber = transaction.getDestinationAccountNumber();","        final String destinationAccountHolderName = transaction.getDestinationAccountHolderName();","        final String transactionDescription = transaction.getDescription();","        final double transactionAmount = transaction.getTransactionAmount();","        if (sourceAccountNumber == null || sourceAccountNumber.length() > MAX_ACCOUNT_NUMBER_LENGTH) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: sourceAccountNumber.\\");","        } else if (destinationAccountNumber == null || destinationAccountNumber.length() > MAX_ACCOUNT_NUMBER_LENGTH) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified:\\"","                    + \\" destinationAccountNumber.\\");","        } else if (destinationAccountHolderName == null || !valueHasCorrectLength(destinationAccountHolderName)) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified:\\"","                    + \\" destinationAccountHolderName.\\");","        } else if (transactionDescription == null || transactionDescription.length() > DESCRIPTION_LIMIT) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified:\\"","                    + \\" transactionDescription.\\");","        } else if (transactionAmount < 0) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: transactionAmount.\\");","        } else if (transaction.isProcessed()) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: isProcessed.\\");","        } else if (transaction.isSuccessful()) {","            throw new IncorrectInputException(\\"The following variable was incorrectly specified: isSuccessful.\\");","        }","    }","","    /**","     * Forwards transaction request to the Authentication service and forwards the reply or sends a rejection if the","     * request fails.","     * @param transaction Transaction request that should be processed.","     * @param cookie Cookie of the User that sent the request.","     * @param api DataBean containing everything in the ApiService","     */","    private static void doTransactionRequest(final Transaction transaction, final String cookie, final ApiBean api) {","        MessageWrapper data = JSONParser.createMessageWrapper(false, 0, \\"Request\\");","        data.setCookie(cookie);","        data.setMethodType(MethodType.TRANSFER_MONEY);","        data.setData(transaction);","","        System.out.printf(\\"%s Forwarding transaction request.\\\\n\\", PREFIX);","        api.getAuthenticationClient().putFormAsyncWith1Param(\\"/services/authentication/transaction\\",","                \\"data\\", api.getJsonConverter().toJson(data),","                (httpStatusCode, httpContentType, transactionReplyJson) -> {","                    if (httpStatusCode == HTTP_OK) {","                        MessageWrapper messageWrapper = api.getJsonConverter().fromJson(","                                JSONParser.removeEscapeCharacters(transactionReplyJson), MessageWrapper.class);","                        if (!messageWrapper.isError()) {","                            sendTransactionCallback((Transaction) messageWrapper.getData(), api);","                        } else {","                            sendErrorReply(messageWrapper, api);","                        }","                    } else {","                        sendErrorReply(JSONParser.createMessageWrapper(true, 500,","                                \\"An unknown error occurred.\\",","                                \\"There was a problem with one of the HTTP requests\\"), api);","                    }","                });","    }","","    /**","     * Forwards the result of a transaction request to the service that sent the request.","     * @param reply The processed transaction","     * @param api DataBean containing everything in the ApiService","     */","    private static void sendTransactionCallback(final Transaction reply, final ApiBean api) {","        if (reply.isSuccessful() && reply.isProcessed()) {","            long transactionId = reply.getTransactionID();","            System.out.printf(\\"%s Internal transaction %d successful.\\\\n\\\\n\\\\n\\\\n\\", PREFIX, transactionId);","            Map<String, Object> result = new HashMap<>();","            JSONRPC2Response response = new JSONRPC2Response(result, api.getId());","            api.getCallbackBuilder().build().reply(response.toJSONString());","        } else {","            System.out.printf(\\"%s Internal transaction was not successful\\\\n\\\\n\\\\n\\\\n\\", PREFIX);","            sendErrorReply(JSONParser.createMessageWrapper(true, 500, \\"Unknown error occurred.\\"), api);","        }","    }","}",""}
42	5	files[]	{/*," * Copyright (c) 2018, Joost Prins <github.com/joostprins>, Tom Leemreize <https://github.com/oplosthee>"," * All rights reserved."," *"," * Redistribution and use in source and binary forms, with or without"," * modification, are permitted provided that the following conditions are met:"," *"," * 1. Redistributions of source code must retain the above copyright notice, this"," *    list of conditions and the following disclaimer."," * 2. Redistributions in binary form must reproduce the above copyright notice,"," *    this list of conditions and the following disclaimer in the documentation"," *    and/or other materials provided with the distribution."," *"," * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \\"AS IS\\" AND"," * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED"," * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE"," * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR"," * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES"," * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;"," * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"," * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT"," * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS"," * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."," */","package nl.utwente.ing;","","import org.springframework.boot.SpringApplication;","import org.springframework.boot.autoconfigure.SpringBootApplication;","",@SpringBootApplication,"public class DPAService {","","\tpublic static void main(String[] args) {","\t\tSpringApplication.run(DPAService.class, args);","\t}","","}",""}
43	5	files[]	{/*," * Copyright (c) 2018, Joost Prins <github.com/joostprins>, Tom Leemreize <https://github.com/oplosthee>"," * All rights reserved."," *"," * Redistribution and use in source and binary forms, with or without"," * modification, are permitted provided that the following conditions are met:"," *"," * 1. Redistributions of source code must retain the above copyright notice, this"," *    list of conditions and the following disclaimer."," * 2. Redistributions in binary form must reproduce the above copyright notice,"," *    this list of conditions and the following disclaimer in the documentation"," *    and/or other materials provided with the distribution."," *"," * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \\"AS IS\\" AND"," * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED"," * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE"," * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR"," * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES"," * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;"," * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"," * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT"," * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS"," * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."," */","package nl.utwente.ing;","","import org.springframework.boot.SpringApplication;","import org.springframework.boot.autoconfigure.SpringBootApplication;","",@SpringBootApplication,"public class DPAService {","","\tpublic static void main(String[] args) {","\t\tSpringApplication.run(DPAService.class, args);","\t}","","}",""}
44	5	files[]	{/*," * Copyright (c) 2018, Joost Prins <github.com/joostprins>, Tom Leemreize <https://github.com/oplosthee>"," * All rights reserved."," *"," * Redistribution and use in source and binary forms, with or without"," * modification, are permitted provided that the following conditions are met:"," *"," * 1. Redistributions of source code must retain the above copyright notice, this"," *    list of conditions and the following disclaimer."," * 2. Redistributions in binary form must reproduce the above copyright notice,"," *    this list of conditions and the following disclaimer in the documentation"," *    and/or other materials provided with the distribution."," *"," * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \\"AS IS\\" AND"," * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED"," * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE"," * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR"," * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES"," * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;"," * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"," * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT"," * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS"," * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."," */","package nl.utwente.ing;","","import org.springframework.boot.SpringApplication;","import org.springframework.boot.autoconfigure.SpringBootApplication;","",@SpringBootApplication,"public class DPAService {","","\tpublic static void main(String[] args) {","\t\tSpringApplication.run(DPAService.class, args);","\t}","","}",""}
45	32	Client.java	{"package client;","","import client.command.WebserviceCommand;","import client.command.WebserviceCommandFactory;","import client.dbase.Mutation;","import nl.knaw.dans.common.dbflib.CorruptedTableException;","import nl.knaw.dans.common.dbflib.Record;","import nl.knaw.dans.common.dbflib.Table;","","import javax.xml.rpc.ServiceException;","import java.io.File;","import java.io.IOException;","import java.net.MalformedURLException;","import java.rmi.RemoteException;","import java.util.HashMap;","import java.util.Iterator;","import java.util.Map;","",/**," * Created by jjk on 11/11/16."," */","public class Client {","    public static void main(String[] args) throws ServiceException, RemoteException, MalformedURLException {","        System.setProperty(\\"javax.net.ssl.trustStore\\", \\"ssl-certificaten\\");","        System.setProperty(\\"javax.net.ssl.trustStorePassword\\", \\"changeit\\");","        org.apache.log4j.Logger.getRootLogger().setLevel(org.apache.log4j.Level.OFF); //Suppress errors about logging initialization.","","        // bepaal de naam en locatie van het mutaties bestand","        String mutatiesBestand = ApplicationProperties.getInstance().getProperty(\\"mutaties-bestand\\");","        File mutatiesFile = new File(mutatiesBestand);","        // behandel het mutaties bestand als dBase tabel","        Table mutatieTable = new Table(mutatiesFile);","","        try {","             //open de tabel","            mutatieTable.open();","","            Iterator<Record> recordIterator = mutatieTable.recordIterator();","","            while(recordIterator.hasNext()) {","                Record record = recordIterator.next();","                Mutation mutation = new Mutation(record);","","                WebserviceCommand command = WebserviceCommandFactory.createCommand(mutation);","                if(command!=null) {","                    command.prepareWebserviceCall();","                    String result = command.callWebservice();","                    Logger.log(mutation,result);","                }","            }","            //Logger.close();","            mutatieTable.close();","        } catch (CorruptedTableException e) {","            System.err.println(mutatiesBestand+\\" is een corrupte tabel. Applicatie wordt afgesloten. Er worden geen mutatie uitgevoerd.\\");","            e.printStackTrace();","            System.exit(-1);","        } catch (IOException e) {","            System.err.println(\\"Er is een Input-Output fout opgetreden. Applicatie wordt afgesloten. Er worden geen mutatie uitgevoerd.\\");","            e.printStackTrace();","            System.exit(-1);","        } finally {","            Logger.close();","        }","    }","","    public static void sendCustomRequest() throws ServiceException, RemoteException {","        Map map = new HashMap();","        map.put(\\"VELD1\\",new nl.knaw.dans.common.dbflib.StringValue(\\"1\\"));","        map.put(\\"VELD14\\",new nl.knaw.dans.common.dbflib.NumberValue(200251505));","        map.put(\\"VELD22\\",new nl.knaw.dans.common.dbflib.NumberValue(200251505));","        map.put(\\"WEBSERVICE\\",new nl.knaw.dans.common.dbflib.StringValue(\\"raadplegenDieren\\"));","        Record tempRecord = new Record(map);","        Mutation tempMut = new Mutation(tempRecord);","        WebserviceCommand tempCommand = WebserviceCommandFactory.createCommand(tempMut);","        tempCommand.prepareWebserviceCall();","        String tempResult = tempCommand.callWebservice();","        Logger.log(tempMut,tempResult);","    }","","}",""}
\.


--
-- Name: files_id_seq; Type: SEQUENCE SET; Schema: public; Owner: codrdb
--

SELECT pg_catalog.setval('files_id_seq', 45, true);


--
-- Data for Name: groups; Type: TABLE DATA; Schema: public; Owner: codrdb
--

COPY groups (id, description) FROM stdin;
1	Amazing Group
2	More amazing group
3	bob
\.


--
-- Name: groups_id_seq; Type: SEQUENCE SET; Schema: public; Owner: codrdb
--

SELECT pg_catalog.setval('groups_id_seq', 3, true);


--
-- Data for Name: module_users; Type: TABLE DATA; Schema: public; Owner: codrdb
--

COPY module_users (module_id, user_id, group_id) FROM stdin;
1	1	1
1	6	1
1	7	1
1	4	1
1	5	2
2	1	2
2	7	1
2	5	1
2	6	1
\.


--
-- Data for Name: modules; Type: TABLE DATA; Schema: public; Owner: codrdb
--

COPY modules (id, name, description) FROM stdin;
6	Godsdienst	Godsdienst BY JJ
8	test	test
9	test1	test1
10	Hardlopen met David	Poah, dat gaat wel erg snel
1	Module McModuleFace	Temporary Test Module
11	test1	test1
3	test	test
5	test	test
2	bobs new mod	topkek
\.


--
-- Name: modules_id_seq; Type: SEQUENCE SET; Schema: public; Owner: codrdb
--

SELECT pg_catalog.setval('modules_id_seq', 11, true);


--
-- Data for Name: projectgroup; Type: TABLE DATA; Schema: public; Owner: codrdb
--

COPY projectgroup (id) FROM stdin;
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
2
19
21
22
23
24
25
26
27
28
29
30
9999
31
32
33
\.


--
-- Name: projectgroup_id_seq; Type: SEQUENCE SET; Schema: public; Owner: codrdb
--

SELECT pg_catalog.setval('projectgroup_id_seq', 33, true);


--
-- Data for Name: projectgroup_users; Type: TABLE DATA; Schema: public; Owner: codrdb
--

COPY projectgroup_users (projectgroup_id, user_id) FROM stdin;
4	4
5	5
4	6
4	7
5	4
9999	1
9999	5
\.


--
-- Data for Name: projects; Type: TABLE DATA; Schema: public; Owner: codrdb
--

COPY projects (id, exercise_id, author_id, projectgroup_id) FROM stdin;
5	1	4	9999
11	1	4	9999
12	1	4	9999
13	1	4	9999
14	1	4	9999
15	1	4	9999
16	1	4	9999
17	1	4	9999
18	1	4	9999
19	1	4	9999
20	1	4	9999
21	1	4	9999
22	1	4	9999
23	1	4	9999
24	1	4	9999
25	1	4	9999
26	1	4	9999
27	1	4	9999
28	1	4	9999
29	1	4	9999
30	1	4	9999
34	1	4	9999
32	1	4	4
\.


--
-- Name: projects_id_seq; Type: SEQUENCE SET; Schema: public; Owner: codrdb
--

SELECT pg_catalog.setval('projects_id_seq', 34, true);


--
-- Data for Name: templates; Type: TABLE DATA; Schema: public; Owner: codrdb
--

COPY templates (id, name) FROM stdin;
1	dfghjkl;
2	Test Template
9	Bob's cool template
\.


--
-- Data for Name: templates_content; Type: TABLE DATA; Schema: public; Owner: codrdb
--

COPY templates_content (template_id, group_id, project_right, comment_right) FROM stdin;
2	1	682	2730
9	1	31	63
\.


--
-- Name: templates_id_seq; Type: SEQUENCE SET; Schema: public; Owner: codrdb
--

SELECT pg_catalog.setval('templates_id_seq', 10, true);


--
-- Data for Name: users; Type: TABLE DATA; Schema: public; Owner: codrdb
--

COPY users (id, session_id, user_level, display_name) FROM stdin;
6	asdsad	1	user6
4	sessionidok	1	user4
5	2347	1	user5
7	asd	1	user7
1	1	1	Testy McTestFace
\.


--
-- Name: users_id_seq; Type: SEQUENCE SET; Schema: public; Owner: codrdb
--

SELECT pg_catalog.setval('users_id_seq', 7, true);


--
-- Name: comments comments_pkey; Type: CONSTRAINT; Schema: public; Owner: codrdb
--

ALTER TABLE ONLY comments
    ADD CONSTRAINT comments_pkey PRIMARY KEY (id);


--
-- Name: courses courses_pkey; Type: CONSTRAINT; Schema: public; Owner: codrdb
--

ALTER TABLE ONLY courses
    ADD CONSTRAINT courses_pkey PRIMARY KEY (id);


--
-- Name: exercises exercises_pkey; Type: CONSTRAINT; Schema: public; Owner: codrdb
--

ALTER TABLE ONLY exercises
    ADD CONSTRAINT exercises_pkey PRIMARY KEY (id);


--
-- Name: files files_pkey; Type: CONSTRAINT; Schema: public; Owner: codrdb
--

ALTER TABLE ONLY files
    ADD CONSTRAINT files_pkey PRIMARY KEY (id);


--
-- Name: groups groups_pkey; Type: CONSTRAINT; Schema: public; Owner: codrdb
--

ALTER TABLE ONLY groups
    ADD CONSTRAINT groups_pkey PRIMARY KEY (id);


--
-- Name: module_users module_users_pkey; Type: CONSTRAINT; Schema: public; Owner: codrdb
--

ALTER TABLE ONLY module_users
    ADD CONSTRAINT module_users_pkey PRIMARY KEY (module_id, user_id);


--
-- Name: modules modules_pkey; Type: CONSTRAINT; Schema: public; Owner: codrdb
--

ALTER TABLE ONLY modules
    ADD CONSTRAINT modules_pkey PRIMARY KEY (id);


--
-- Name: projectgroup projectgroup_pkey; Type: CONSTRAINT; Schema: public; Owner: codrdb
--

ALTER TABLE ONLY projectgroup
    ADD CONSTRAINT projectgroup_pkey PRIMARY KEY (id);


--
-- Name: projectgroup_users projectgroup_users_pkey; Type: CONSTRAINT; Schema: public; Owner: codrdb
--

ALTER TABLE ONLY projectgroup_users
    ADD CONSTRAINT projectgroup_users_pkey PRIMARY KEY (projectgroup_id, user_id);


--
-- Name: projects projects_pkey; Type: CONSTRAINT; Schema: public; Owner: codrdb
--

ALTER TABLE ONLY projects
    ADD CONSTRAINT projects_pkey PRIMARY KEY (id);


--
-- Name: templates_content templates_content_pkey; Type: CONSTRAINT; Schema: public; Owner: codrdb
--

ALTER TABLE ONLY templates_content
    ADD CONSTRAINT templates_content_pkey PRIMARY KEY (template_id, group_id);


--
-- Name: templates templates_pkey; Type: CONSTRAINT; Schema: public; Owner: codrdb
--

ALTER TABLE ONLY templates
    ADD CONSTRAINT templates_pkey PRIMARY KEY (id);


--
-- Name: users users_pkey; Type: CONSTRAINT; Schema: public; Owner: codrdb
--

ALTER TABLE ONLY users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- Name: comments fk_author_id; Type: FK CONSTRAINT; Schema: public; Owner: codrdb
--

ALTER TABLE ONLY comments
    ADD CONSTRAINT fk_author_id FOREIGN KEY (author_id) REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: exercises fk_course_id; Type: FK CONSTRAINT; Schema: public; Owner: codrdb
--

ALTER TABLE ONLY exercises
    ADD CONSTRAINT fk_course_id FOREIGN KEY (course_id) REFERENCES courses(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: projects fk_exercise_id; Type: FK CONSTRAINT; Schema: public; Owner: codrdb
--

ALTER TABLE ONLY projects
    ADD CONSTRAINT fk_exercise_id FOREIGN KEY (exercise_id) REFERENCES exercises(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: comments fk_file_id; Type: FK CONSTRAINT; Schema: public; Owner: codrdb
--

ALTER TABLE ONLY comments
    ADD CONSTRAINT fk_file_id FOREIGN KEY (file_id) REFERENCES files(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: templates_content fk_group_id; Type: FK CONSTRAINT; Schema: public; Owner: codrdb
--

ALTER TABLE ONLY templates_content
    ADD CONSTRAINT fk_group_id FOREIGN KEY (group_id) REFERENCES groups(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: module_users fk_group_id; Type: FK CONSTRAINT; Schema: public; Owner: codrdb
--

ALTER TABLE ONLY module_users
    ADD CONSTRAINT fk_group_id FOREIGN KEY (group_id) REFERENCES groups(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: courses fk_module_id; Type: FK CONSTRAINT; Schema: public; Owner: codrdb
--

ALTER TABLE ONLY courses
    ADD CONSTRAINT fk_module_id FOREIGN KEY (module_id) REFERENCES modules(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: module_users fk_module_id; Type: FK CONSTRAINT; Schema: public; Owner: codrdb
--

ALTER TABLE ONLY module_users
    ADD CONSTRAINT fk_module_id FOREIGN KEY (module_id) REFERENCES modules(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: comments fk_parent_id; Type: FK CONSTRAINT; Schema: public; Owner: codrdb
--

ALTER TABLE ONLY comments
    ADD CONSTRAINT fk_parent_id FOREIGN KEY (parent_id) REFERENCES comments(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: files fk_project_id_id; Type: FK CONSTRAINT; Schema: public; Owner: codrdb
--

ALTER TABLE ONLY files
    ADD CONSTRAINT fk_project_id_id FOREIGN KEY (project_id) REFERENCES projects(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: projectgroup_users fk_projectgroup_id; Type: FK CONSTRAINT; Schema: public; Owner: codrdb
--

ALTER TABLE ONLY projectgroup_users
    ADD CONSTRAINT fk_projectgroup_id FOREIGN KEY (projectgroup_id) REFERENCES projectgroup(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: projects fk_projectgroup_id; Type: FK CONSTRAINT; Schema: public; Owner: codrdb
--

ALTER TABLE ONLY projects
    ADD CONSTRAINT fk_projectgroup_id FOREIGN KEY (projectgroup_id) REFERENCES projectgroup(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: exercises fk_rights_template_id; Type: FK CONSTRAINT; Schema: public; Owner: codrdb
--

ALTER TABLE ONLY exercises
    ADD CONSTRAINT fk_rights_template_id FOREIGN KEY (rights_template_id) REFERENCES templates(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: templates_content fk_template_id; Type: FK CONSTRAINT; Schema: public; Owner: codrdb
--

ALTER TABLE ONLY templates_content
    ADD CONSTRAINT fk_template_id FOREIGN KEY (template_id) REFERENCES templates(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: projectgroup_users fk_user_id; Type: FK CONSTRAINT; Schema: public; Owner: codrdb
--

ALTER TABLE ONLY projectgroup_users
    ADD CONSTRAINT fk_user_id FOREIGN KEY (user_id) REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: module_users fk_user_id; Type: FK CONSTRAINT; Schema: public; Owner: codrdb
--

ALTER TABLE ONLY module_users
    ADD CONSTRAINT fk_user_id FOREIGN KEY (user_id) REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: postgraphile_watch_ddl; Type: EVENT TRIGGER; Schema: -; Owner: codrdb
--

CREATE EVENT TRIGGER postgraphile_watch_ddl ON ddl_command_end
         WHEN TAG IN ('ALTER DOMAIN', 'ALTER FOREIGN TABLE', 'ALTER FUNCTION', 'ALTER SCHEMA', 'ALTER TABLE', 'ALTER TYPE', 'ALTER VIEW', 'COMMENT', 'CREATE DOMAIN', 'CREATE FOREIGN TABLE', 'CREATE FUNCTION', 'CREATE SCHEMA', 'CREATE TABLE', 'CREATE TABLE AS', 'CREATE VIEW', 'DROP DOMAIN', 'DROP FOREIGN TABLE', 'DROP FUNCTION', 'DROP SCHEMA', 'DROP TABLE', 'DROP VIEW', 'GRANT', 'REVOKE', 'SELECT INTO')
   EXECUTE PROCEDURE postgraphile_watch.notify_watchers_ddl();


ALTER EVENT TRIGGER postgraphile_watch_ddl OWNER TO codrdb;

--
-- Name: postgraphile_watch_drop; Type: EVENT TRIGGER; Schema: -; Owner: codrdb
--

CREATE EVENT TRIGGER postgraphile_watch_drop ON sql_drop
   EXECUTE PROCEDURE postgraphile_watch.notify_watchers_drop();


ALTER EVENT TRIGGER postgraphile_watch_drop OWNER TO codrdb;

--
-- PostgreSQL database dump complete
--

